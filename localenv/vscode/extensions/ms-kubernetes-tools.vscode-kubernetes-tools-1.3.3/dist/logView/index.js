!function(n){var g={};function t(I){if(g[I])return g[I].exports;var e=g[I]={i:I,l:!1,exports:{}};return n[I].call(e.exports,e,e.exports,t),e.l=!0,e.exports}t.m=n,t.c=g,t.d=function(n,g,I){t.o(n,g)||Object.defineProperty(n,g,{enumerable:!0,get:I})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,g){if(1&g&&(n=t(n)),8&g)return n;if(4&g&&"object"==typeof n&&n&&n.__esModule)return n;var I=Object.create(null);if(t.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:n}),2&g&&"string"!=typeof n)for(var e in n)t.d(I,e,function(g){return n[g]}.bind(null,e));return I},t.n=function(n){var g=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(g,"a",g),g},t.o=function(n,g){return Object.prototype.hasOwnProperty.call(n,g)},t.p="",t(t.s=0)}([function(module,exports){eval("const vscode = acquireVsCodeApi();\nconst fullPageContent = [];\nlet schemaColors;\nlet defaultContainer;\nlet renderNonce = 0;\nlet isToBottom = true;\nlet lastScrollTop = 0;\n\nwindow.addEventListener('message', (event) => {\n    const message = event.data;\n    switch (message.command) {\n        case 'init': {\n            const containers = message.containers;\n            schemaColors = JSON.parse(message.colors);\n            if (containers.length === 1) {\n                defaultContainer = containers[0];\n                return;\n            }\n\n            const containersPanel = document.getElementById('containers-panel');\n            containersPanel.classList.remove('display-none');\n            containersPanel.classList.add('display-inline-block');\n\n            const select = createElement('vscode-select');\n            select.setAttribute('id', 'containers-select');\n            // eslint-disable-next-line @typescript-eslint/prefer-for-of\n            for (let i = 0; i < containers.length; i += 1) {\n                const option = createElement('vscode-option', containers[i], containers[i]);\n                if (i === 0) {\n                    option.setAttribute('selected', '');\n                }\n                select.appendChild(option);\n            }\n            containersPanel.appendChild(select);\n        }\n        case 'content': {\n            const text = message.text;\n            if (!text) {\n                return;\n            }\n            const newContent = text.split('\\n');\n            updateContent(newContent, false);\n\n            // handle auto-scroll on/off\n            if (isToBottom) {\n                scrollToBottom();\n            }\n        }\n    }\n});\n\nfunction debounce(func, wait, immediate) {\n    let timeout;\n    return function() {\n        const context = this, args = arguments;\n        const later = function() {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\n\nfunction beautifyContentLineRange(contentLines, ix, end) {\n    if (ix && end) {\n        contentLines = contentLines.slice(ix, end);\n    }\n    return beautifyLines(contentLines);\n};\n\nfunction beautifyLines(contentLines) {\n    if (!contentLines) {\n        return '';\n    }\n    let content = contentLines.join('\\n');\n    if (content) {\n        content = content.match(/\\n$/) ? content : content + '\\n';\n        content = highlightWords(content);\n    }\n    return content;\n}\n\nfunction highlightWords(content) {\n    if (!schemaColors) {\n        return content;\n    }\n    for (const rule of schemaColors) {\n        const regexp = new RegExp(rule.regex, \"gi\");\n        content = content.replaceAll(regexp, repl);\n        content = content.replaceAll('#ruleColor', rule.color);\n    }\n    return content;\n}\n\nfunction repl(match, _word, offset, originalString) {\n    if (!originalString) {\n        return match;\n    }\n    const indexOpenSpan = originalString.substring(0, offset + match.length).lastIndexOf(\"<span\");\n    const indexCloseSpan = originalString.substring(0, offset + match.length).lastIndexOf(\"</span>\");\n    if (indexOpenSpan === -1) {\n        return `<span style=\"color:#ruleColor\">${match}</span>`;\n    } else if (indexOpenSpan !== -1 && indexCloseSpan === -1) {\n        return match;\n    } else if (indexOpenSpan < indexCloseSpan) {\n            return `<span style=\"color:#ruleColor\">${match}</span>`;\n    } else {\n        return match;\n    }\n}\n\nfunction filterNewLogs(logsText) {\n    return filter(logsText);\n}\n\nfunction filter(logs) {\n    let isNewLog = false;\n    let text = fullPageContent;\n    if (logs) {\n        isNewLog = true;\n        text = logs;\n    }\n    const filterInput = document.getElementById('filter-input').value;\n    const mode = document.getElementById('filter-select').value;\n    let content;\n    if (filterInput.length > 0 && mode !== 'all') {\n        const regex = new RegExp(filterInput);\n        switch (mode) {\n            case 'include':\n                content = text.filter((line) => regex.test(line));\n                break;\n            case 'exclude':\n                content = text.filter((line) => !regex.test(line));\n                break;\n            case 'before':\n                content = [];\n                if (!isNewLog) {\n                    for (const line of text) {\n                        if (regex.test(line)) {\n                            break;\n                        }\n                        content.push(line);\n                    }\n                }\n                break;\n            case 'after':\n                if (isNewLog) {\n                    content = text;\n                } else {\n                    const i = text.findIndex((line) => {\n                        return regex.test(line);\n                    });\n                    content = text.slice(i+1);\n                }\n                break;\n            default:\n                content = [];\n                break;\n        }\n    } else {\n        content = text;\n    }\n\n    return content;\n}\n\nfunction createElement(type, value, content) {\n    const element = document.createElement(type);\n    if (value) { element.value = value; }\n    if (content) { element.textContent = content; }\n    return element;\n}\n\nfunction init() {\n    const runBtn = document.getElementById('runBtn');\n    runBtn.addEventListener('click', (_event) => {\n        changeVisibilityAfterRun();\n        startLog();\n    });\n\n    const stopBtn = document.getElementById('stopBtn');\n    stopBtn.addEventListener('click', (_event) => {\n        changeVisibilityAfterStop();\n        stopLog();\n    });\n\n    const clearBtn = document.getElementById('clearBtn');\n    clearBtn.addEventListener('click', (_event) => {\n        changeVisibilityAfterClear();\n        clear();\n    });\n\n    const resetBtn = document.getElementById('resetBtn');\n    resetBtn.addEventListener('click', (_event) => {\n        reset();\n    });\n\n    const bottomBtn= document.getElementById('bottomBtn');\n    bottomBtn.addEventListener('click', (_event) => {\n        scrollToBottom();\n    });\n\n    const wrapChk = document.getElementById('wrap-chk');\n    wrapChk.addEventListener('vsc-change', function(event) {\n        const contentDiv = document.getElementById('content');\n        if (event.detail.checked) {\n            contentDiv.classList.remove('white-space-pre');\n            contentDiv.classList.add('white-space-wrap');\n        } else {\n            contentDiv.classList.remove('white-space-wrap');\n            contentDiv.classList.add('white-space-pre');\n        }\n    });\n\n    const filterSelect = document.getElementById('filter-select');\n    filterSelect.addEventListener('vsc-change', (_event) => {\n        runFilter();\n    });\n\n    const filterInput = document.getElementById('filter-input');\n    filterInput.addEventListener('keyup', (_event) => {\n        runFilter();\n    });\n\n    const logPanel = document.getElementById('logPanel');\n    const toBottom = debounce(function() {\n        const st = logPanel.scrollTop;\n        if (st > lastScrollTop){\n            // scroll down\n            isToBottom = (logPanel.scrollTop + window.innerHeight) >= logPanel.scrollHeight;\n        } else {\n            // scroll up\n            isToBottom = false;\n        }\n        lastScrollTop = st <= 0 ? 0 : st;\n    }, 250);\n    logPanel.addEventListener(\"scroll\", toBottom);\n}\n\nfunction runFilter() {\n    setTimeout(runFilterInternal, 0);\n}\n\nfunction runFilterInternal() {\n// We use this to abort renders in progress if a new render starts\n    renderNonce = Math.random();\n    const currentNonce = renderNonce;\n\n    const content = filter();\n\n    const contentDiv = document.getElementById('content');\n    contentDiv.textContent = !isFollow() ? 'No logs ...' : '';\n\n    // This is probably seems more complicated than necessary.\n    // However, rendering large blocks of text are _slow_ and kill the UI thread.\n    // So we split it up into manageable chunks to keep the UX lively.\n    // Of course the trouble is then we could interleave multiple different filters.\n    // So we use the random nonce to detect and pre-empt previous renders.\n    let ix = 0;\n    const step = 1000;\n    const fn = () => {\n        if (renderNonce !== currentNonce) {\n            return;\n        }\n        if (ix >= content.length) {\n            return;\n        }\n        const end = Math.min(content.length, ix + step);\n        setContentDiv(beautifyContentLineRange(content, ix, end));\n        ix += step;\n        setTimeout(fn, 0);\n    };\n    fn();\n}\n\nfunction changeVisibilityAfterRun() {\n    if (getToTerminal()) {\n        return;\n    }\n    document.getElementById('runBtn').classList.add('display-none');\n    if (isFollow()) {\n        switchClass('stopBtn', 'display-none', 'display-inline-block');\n    }\n    switchClass('clearBtn', 'display-none', 'display-inline-block');\n}\n\nfunction changeVisibilityAfterClear() {\n    switchClass('clearBtn', 'display-inline-block', 'display-none');\n\n    if (!isFollow()) {\n        switchClass('runBtn', 'display-none', 'display-inline-block');\n    }\n}\n\nfunction changeVisibilityAfterStop() {\n    switchClass('stopBtn', 'display-inline-block', 'display-none');\n\n    if (isFollow()) {\n        switchClass('runBtn', 'display-none', 'display-inline-block');\n    }\n}\n\nfunction switchClass(id, classToRemove, classToAdd) {\n    const element = document.getElementById(id);\n    if (element.classList.contains(classToRemove)) {\n        element.classList.remove(classToRemove);\n    }\n    if (!element.classList.contains(classToAdd)) {\n        element.classList.add(classToAdd);\n    }\n}\n\nfunction startLog() {\n    const options = {\n        container: getContainer(),\n        follow: isFollow(),\n        timestamp: document.getElementById('timestamp-chk').checked,\n        since: getSinceDuration(),\n        tail: getTail(),\n        terminal: getToTerminal()\n    };\n    vscode.postMessage({\n        command: 'start',\n        options: JSON.stringify(options)\n    });\n}\n\nfunction stopLog() {\n    vscode.postMessage({\n        command: 'stop'\n    });\n}\n\nfunction clear() {\n    fullPageContent.length = 0;\n    updateContent(undefined, true);\n}\n\nfunction reset() {\n    const containersSelect = document.getElementById('containers-select');\n    if (containersSelect) {\n        containersSelect.selectedIndex = 0;\n    }\n    document.getElementById('follow-chk').checked = false;\n    document.getElementById('timestamp-chk').checked = false;\n    document.getElementById('since-input').value = '0';\n    document.getElementById('since-select').selectedIndex = 0;\n    document.getElementById('tail-input').value = '-1';\n    document.getElementById('terminal-chk').checked = false;\n}\n\nfunction updateContent(newContent, clear) {\n    const contentDiv = document.getElementById('content');\n    if (clear) {\n        contentDiv.innerHTML = '';\n        return;\n    }\n\n    newContent.forEach((line) => {\n        if (line.length > 0) {\n            fullPageContent.push(line);\n        }\n    });\n    const beautifiedLines = beautifyLines(filterNewLogs(newContent));\n    setContentDiv(beautifiedLines);\n    switchClass('clearBtn', 'display-none', 'display-inline-block');\n}\n\nfunction setContentDiv(content) {\n    const contentDiv = document.getElementById('content');\n    if (!isFollow()) {\n        if (content === '') {\n            contentDiv.innerHTML = 'No logs ...';\n        } else {\n            contentDiv.innerHTML = content;\n        }\n    } else {\n        contentDiv.innerHTML += content;\n    }\n}\n\nfunction scrollToBottom () {\n    document.getElementById('bottom').scrollIntoView();\n}\n\nfunction getContainer() {\n    const containersSelect = document.getElementById('containers-select');\n    if (containersSelect) {\n        return containersSelect.value;\n    }\n    return defaultContainer;\n}\n\nfunction isFollow() {\n    return document.getElementById('follow-chk').checked;\n}\n\nfunction getSinceDuration() {\n    const sinceType = document.getElementById('since-select').value;\n    const sinceInput = document.getElementById('since-input').value;\n    if (isNaN(sinceInput) || sinceInput <= 0 || sinceType.trim() === '') {\n        return 0;\n    }\n    return `${sinceInput}${sinceType}`;\n}\n\nfunction getTail() {\n    const tailValue = document.getElementById('tail-input').value;\n    if (isNaN(tailValue) || tailValue <= 0) {\n        return -1;\n    }\n    return tailValue;\n}\n\nfunction getToTerminal() {\n    return document.getElementById('terminal-chk').checked;\n}\n\n(function() {\n    init();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);