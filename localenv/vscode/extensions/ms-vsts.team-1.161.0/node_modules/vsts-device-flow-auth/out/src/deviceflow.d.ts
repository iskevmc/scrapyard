export declare class DeviceFlowDetails {
    private verifyUrl;
    private userCode;
    private message;
    constructor(message: string, userCode: string, verifyUrl: string);
    readonly Message: string;
    readonly UserCode: string;
    readonly VerificationUrl: string;
}
export interface IDeviceFlowAuthenticationOptions {
    authorityHost?: string;
    clientId: string;
    redirectUri: string;
    userAgent?: string;
}
export interface IDeviceFlowTokenOptions {
    grantType?: string;
    tokenScope?: string;
    tokenDescription?: string;
}
export declare class DeviceFlowAuthenticator {
    private static readonly DefaultAuthorityHost;
    private static readonly DefaultGrantType;
    private readonly authorityHost;
    private readonly clientId;
    private readonly redirectUri;
    private readonly userAgent;
    private readonly grantType;
    private readonly tokenScope;
    private readonly tokenDescription;
    private tenantId;
    private resourceUri;
    private deviceCode;
    private interval;
    private expiresIn;
    constructor(resourceUri: string, authOptions: IDeviceFlowAuthenticationOptions, tokenOptions?: IDeviceFlowTokenOptions);
    private getDefaultUserAgent();
    private addTrailingSeparator(path, separator);
    private getAuthorizationHeaders(accessToken);
    private getUserAgentHeaders();
    private getAuthenticatedUserId(accessToken);
    private getIdentityServiceUrl(accessToken);
    private getScopedCompactAccessToken(accessToken, userId);
    private getTenantId();
    private sleep(ms);
    private waitOnResponseAccessToken(deviceCode);
    GetDeviceFlowDetails(): Promise<DeviceFlowDetails>;
    private cancelFlag;
    private throwExceptionOnCancel;
    Cancel(throwExceptionOnCancel?: boolean): void;
    WaitForPersonalAccessToken(): Promise<string>;
}
