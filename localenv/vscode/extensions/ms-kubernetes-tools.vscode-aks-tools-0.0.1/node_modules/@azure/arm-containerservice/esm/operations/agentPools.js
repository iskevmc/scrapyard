/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/agentPoolsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a AgentPools. */
var AgentPools = /** @class */ (function () {
    /**
     * Create a AgentPools.
     * @param {ContainerServiceClientContext} client Reference to the service client.
     */
    function AgentPools(client) {
        this.client = client;
    }
    AgentPools.prototype.list = function (resourceGroupName, managedClusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            managedClusterName: managedClusterName,
            options: options
        }, listOperationSpec, callback);
    };
    AgentPools.prototype.get = function (resourceGroupName, managedClusterName, agentPoolName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            managedClusterName: managedClusterName,
            agentPoolName: agentPoolName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates or updates an agent pool in the specified managed cluster.
     * @summary Creates or updates an agent pool.
     * @param resourceGroupName The name of the resource group.
     * @param managedClusterName The name of the managed cluster resource.
     * @param agentPoolName The name of the agent pool.
     * @param parameters Parameters supplied to the Create or Update an agent pool operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AgentPoolsCreateOrUpdateResponse>
     */
    AgentPools.prototype.createOrUpdate = function (resourceGroupName, managedClusterName, agentPoolName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, managedClusterName, agentPoolName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes the agent pool in the specified managed cluster.
     * @summary Deletes an agent pool.
     * @param resourceGroupName The name of the resource group.
     * @param managedClusterName The name of the managed cluster resource.
     * @param agentPoolName The name of the agent pool.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    AgentPools.prototype.deleteMethod = function (resourceGroupName, managedClusterName, agentPoolName, options) {
        return this.beginDeleteMethod(resourceGroupName, managedClusterName, agentPoolName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates or updates an agent pool in the specified managed cluster.
     * @summary Creates or updates an agent pool.
     * @param resourceGroupName The name of the resource group.
     * @param managedClusterName The name of the managed cluster resource.
     * @param agentPoolName The name of the agent pool.
     * @param parameters Parameters supplied to the Create or Update an agent pool operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AgentPools.prototype.beginCreateOrUpdate = function (resourceGroupName, managedClusterName, agentPoolName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            managedClusterName: managedClusterName,
            agentPoolName: agentPoolName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Deletes the agent pool in the specified managed cluster.
     * @summary Deletes an agent pool.
     * @param resourceGroupName The name of the resource group.
     * @param managedClusterName The name of the managed cluster resource.
     * @param agentPoolName The name of the agent pool.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AgentPools.prototype.beginDeleteMethod = function (resourceGroupName, managedClusterName, agentPoolName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            managedClusterName: managedClusterName,
            agentPoolName: agentPoolName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    AgentPools.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return AgentPools;
}());
export { AgentPools };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{managedClusterName}/agentPools",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName0,
        Parameters.managedClusterName
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AgentPoolListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{managedClusterName}/agentPools/{agentPoolName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName0,
        Parameters.managedClusterName,
        Parameters.agentPoolName
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AgentPool
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{managedClusterName}/agentPools/{agentPoolName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName0,
        Parameters.managedClusterName,
        Parameters.agentPoolName
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.AgentPool, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AgentPool
        },
        201: {
            bodyMapper: Mappers.AgentPool
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{managedClusterName}/agentPools/{agentPoolName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName0,
        Parameters.managedClusterName,
        Parameters.agentPoolName
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AgentPoolListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=agentPools.js.map