/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/openShiftManagedClustersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a OpenShiftManagedClusters. */
var OpenShiftManagedClusters = /** @class */ (function () {
    /**
     * Create a OpenShiftManagedClusters.
     * @param {ContainerServiceClientContext} client Reference to the service client.
     */
    function OpenShiftManagedClusters(client) {
        this.client = client;
    }
    OpenShiftManagedClusters.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    OpenShiftManagedClusters.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    OpenShiftManagedClusters.prototype.get = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates or updates a OpenShift managed cluster with the specified configuration for agents and
     * OpenShift version.
     * @summary Creates or updates an OpenShift managed cluster.
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the OpenShift managed cluster resource.
     * @param parameters Parameters supplied to the Create or Update an OpenShift Managed Cluster
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.OpenShiftManagedClustersCreateOrUpdateResponse>
     */
    OpenShiftManagedClusters.prototype.createOrUpdate = function (resourceGroupName, resourceName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, resourceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates an OpenShift managed cluster with the specified tags.
     * @summary Updates tags on an OpenShift managed cluster.
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the OpenShift managed cluster resource.
     * @param parameters Parameters supplied to the Update OpenShift Managed Cluster Tags operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.OpenShiftManagedClustersUpdateTagsResponse>
     */
    OpenShiftManagedClusters.prototype.updateTags = function (resourceGroupName, resourceName, parameters, options) {
        return this.beginUpdateTags(resourceGroupName, resourceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes the OpenShift managed cluster with a specified resource group and name.
     * @summary Deletes an OpenShift managed cluster.
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the OpenShift managed cluster resource.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    OpenShiftManagedClusters.prototype.deleteMethod = function (resourceGroupName, resourceName, options) {
        return this.beginDeleteMethod(resourceGroupName, resourceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates or updates a OpenShift managed cluster with the specified configuration for agents and
     * OpenShift version.
     * @summary Creates or updates an OpenShift managed cluster.
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the OpenShift managed cluster resource.
     * @param parameters Parameters supplied to the Create or Update an OpenShift Managed Cluster
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    OpenShiftManagedClusters.prototype.beginCreateOrUpdate = function (resourceGroupName, resourceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Updates an OpenShift managed cluster with the specified tags.
     * @summary Updates tags on an OpenShift managed cluster.
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the OpenShift managed cluster resource.
     * @param parameters Parameters supplied to the Update OpenShift Managed Cluster Tags operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    OpenShiftManagedClusters.prototype.beginUpdateTags = function (resourceGroupName, resourceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            parameters: parameters,
            options: options
        }, beginUpdateTagsOperationSpec, options);
    };
    /**
     * Deletes the OpenShift managed cluster with a specified resource group and name.
     * @summary Deletes an OpenShift managed cluster.
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the OpenShift managed cluster resource.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    OpenShiftManagedClusters.prototype.beginDeleteMethod = function (resourceGroupName, resourceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    OpenShiftManagedClusters.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    OpenShiftManagedClusters.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    return OpenShiftManagedClusters;
}());
export { OpenShiftManagedClusters };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/openShiftManagedClusters",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OpenShiftManagedClusterListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName0
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OpenShiftManagedClusterListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName0,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OpenShiftManagedCluster
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName0,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.OpenShiftManagedCluster, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OpenShiftManagedCluster
        },
        201: {
            bodyMapper: Mappers.OpenShiftManagedCluster
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateTagsOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName0,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.TagsObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OpenShiftManagedCluster
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName0,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OpenShiftManagedClusterListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OpenShiftManagedClusterListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=openShiftManagedClusters.js.map