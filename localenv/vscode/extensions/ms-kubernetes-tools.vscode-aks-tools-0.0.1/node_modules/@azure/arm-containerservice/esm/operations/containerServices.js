/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/containerServicesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ContainerServices. */
var ContainerServices = /** @class */ (function () {
    /**
     * Create a ContainerServices.
     * @param {ContainerServiceClientContext} client Reference to the service client.
     */
    function ContainerServices(client) {
        this.client = client;
    }
    ContainerServices.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * Creates or updates a container service with the specified configuration of orchestrator,
     * masters, and agents.
     * @summary Creates or updates a container service.
     * @param resourceGroupName The name of the resource group.
     * @param containerServiceName The name of the container service in the specified subscription and
     * resource group.
     * @param parameters Parameters supplied to the Create or Update a Container Service operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ContainerServicesCreateOrUpdateResponse>
     */
    ContainerServices.prototype.createOrUpdate = function (resourceGroupName, containerServiceName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, containerServiceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    ContainerServices.prototype.get = function (resourceGroupName, containerServiceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            containerServiceName: containerServiceName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Deletes the specified container service in the specified subscription and resource group. The
     * operation does not delete other resources created as part of creating a container service,
     * including storage accounts, VMs, and availability sets. All the other resources created with the
     * container service are part of the same resource group and can be deleted individually.
     * @summary Deletes the specified container service.
     * @param resourceGroupName The name of the resource group.
     * @param containerServiceName The name of the container service in the specified subscription and
     * resource group.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    ContainerServices.prototype.deleteMethod = function (resourceGroupName, containerServiceName, options) {
        return this.beginDeleteMethod(resourceGroupName, containerServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    ContainerServices.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    ContainerServices.prototype.listOrchestrators = function (location, options, callback) {
        return this.client.sendOperationRequest({
            location: location,
            options: options
        }, listOrchestratorsOperationSpec, callback);
    };
    /**
     * Creates or updates a container service with the specified configuration of orchestrator,
     * masters, and agents.
     * @summary Creates or updates a container service.
     * @param resourceGroupName The name of the resource group.
     * @param containerServiceName The name of the container service in the specified subscription and
     * resource group.
     * @param parameters Parameters supplied to the Create or Update a Container Service operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ContainerServices.prototype.beginCreateOrUpdate = function (resourceGroupName, containerServiceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            containerServiceName: containerServiceName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Deletes the specified container service in the specified subscription and resource group. The
     * operation does not delete other resources created as part of creating a container service,
     * including storage accounts, VMs, and availability sets. All the other resources created with the
     * container service are part of the same resource group and can be deleted individually.
     * @summary Deletes the specified container service.
     * @param resourceGroupName The name of the resource group.
     * @param containerServiceName The name of the container service in the specified subscription and
     * resource group.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ContainerServices.prototype.beginDeleteMethod = function (resourceGroupName, containerServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            containerServiceName: containerServiceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    ContainerServices.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    ContainerServices.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    return ContainerServices;
}());
export { ContainerServices };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/containerServices",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
    urlParameters: [
        Parameters.resourceGroupName1,
        Parameters.containerServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerService
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices",
    urlParameters: [
        Parameters.resourceGroupName1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOrchestratorsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/orchestrators",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.location
    ],
    queryParameters: [
        Parameters.apiVersion2,
        Parameters.resourceType
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OrchestratorVersionProfileListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
    urlParameters: [
        Parameters.resourceGroupName1,
        Parameters.containerServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ContainerService, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ContainerService
        },
        201: {
            bodyMapper: Mappers.ContainerService
        },
        202: {
            bodyMapper: Mappers.ContainerService
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
    urlParameters: [
        Parameters.resourceGroupName1,
        Parameters.containerServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=containerServices.js.map