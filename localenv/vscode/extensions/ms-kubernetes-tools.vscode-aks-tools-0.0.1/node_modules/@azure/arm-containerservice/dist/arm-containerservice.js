/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmContainerservice = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PurchasePlan = {
        serializedName: "PurchasePlan",
        type: {
            name: "Composite",
            className: "PurchasePlan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                },
                promotionCode: {
                    serializedName: "promotionCode",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftRouterProfile = {
        serializedName: "OpenShiftRouterProfile",
        type: {
            name: "Composite",
            className: "OpenShiftRouterProfile",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publicSubdomain: {
                    serializedName: "publicSubdomain",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkProfile = {
        serializedName: "NetworkProfile",
        type: {
            name: "Composite",
            className: "NetworkProfile",
            modelProperties: {
                vnetCidr: {
                    serializedName: "vnetCidr",
                    defaultValue: '10.0.0.0/8',
                    type: {
                        name: "String"
                    }
                },
                peerVnetId: {
                    serializedName: "peerVnetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterMasterPoolProfile = {
        serializedName: "OpenShiftManagedClusterMasterPoolProfile",
        type: {
            name: "Composite",
            className: "OpenShiftManagedClusterMasterPoolProfile",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    required: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                subnetCidr: {
                    serializedName: "subnetCidr",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterAgentPoolProfile = {
        serializedName: "OpenShiftManagedClusterAgentPoolProfile",
        type: {
            name: "Composite",
            className: "OpenShiftManagedClusterAgentPoolProfile",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    required: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                subnetCidr: {
                    serializedName: "subnetCidr",
                    defaultValue: '10.0.0.0/24',
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                },
                role: {
                    serializedName: "role",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterBaseIdentityProvider = {
        serializedName: "OpenShiftManagedClusterBaseIdentityProvider",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "OpenShiftManagedClusterBaseIdentityProvider",
            className: "OpenShiftManagedClusterBaseIdentityProvider",
            modelProperties: {
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterIdentityProvider = {
        serializedName: "OpenShiftManagedClusterIdentityProvider",
        type: {
            name: "Composite",
            className: "OpenShiftManagedClusterIdentityProvider",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "Composite",
                        className: "OpenShiftManagedClusterBaseIdentityProvider"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterAuthProfile = {
        serializedName: "OpenShiftManagedClusterAuthProfile",
        type: {
            name: "Composite",
            className: "OpenShiftManagedClusterAuthProfile",
            modelProperties: {
                identityProviders: {
                    serializedName: "identityProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OpenShiftManagedClusterIdentityProvider"
                            }
                        }
                    }
                }
            }
        }
    };
    var OpenShiftManagedCluster = {
        serializedName: "OpenShiftManagedCluster",
        type: {
            name: "Composite",
            className: "OpenShiftManagedCluster",
            modelProperties: __assign({}, Resource.type.modelProperties, { plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "PurchasePlan"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, openShiftVersion: {
                    required: true,
                    serializedName: "properties.openShiftVersion",
                    type: {
                        name: "String"
                    }
                }, publicHostname: {
                    serializedName: "properties.publicHostname",
                    type: {
                        name: "String"
                    }
                }, fqdn: {
                    serializedName: "properties.fqdn",
                    type: {
                        name: "String"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, routerProfiles: {
                    serializedName: "properties.routerProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OpenShiftRouterProfile"
                            }
                        }
                    }
                }, masterPoolProfile: {
                    serializedName: "properties.masterPoolProfile",
                    type: {
                        name: "Composite",
                        className: "OpenShiftManagedClusterMasterPoolProfile"
                    }
                }, agentPoolProfiles: {
                    serializedName: "properties.agentPoolProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OpenShiftManagedClusterAgentPoolProfile"
                            }
                        }
                    }
                }, authProfile: {
                    serializedName: "properties.authProfile",
                    type: {
                        name: "Composite",
                        className: "OpenShiftManagedClusterAuthProfile"
                    }
                } })
        }
    };
    var OpenShiftManagedClusterAADIdentityProvider = {
        serializedName: "AADIdentityProvider",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OpenShiftManagedClusterBaseIdentityProvider.type.polymorphicDiscriminator,
            uberParent: "OpenShiftManagedClusterBaseIdentityProvider",
            className: "OpenShiftManagedClusterAADIdentityProvider",
            modelProperties: __assign({}, OpenShiftManagedClusterBaseIdentityProvider.type.modelProperties, { clientId: {
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }, secret: {
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }, customerAdminGroupId: {
                    serializedName: "customerAdminGroupId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TagsObject = {
        serializedName: "TagsObject",
        type: {
            name: "Composite",
            className: "TagsObject",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerServiceCustomProfile = {
        serializedName: "ContainerServiceCustomProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceCustomProfile",
            modelProperties: {
                orchestrator: {
                    required: true,
                    serializedName: "orchestrator",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultSecretRef = {
        serializedName: "KeyVaultSecretRef",
        type: {
            name: "Composite",
            className: "KeyVaultSecretRef",
            modelProperties: {
                vaultID: {
                    required: true,
                    serializedName: "vaultID",
                    type: {
                        name: "String"
                    }
                },
                secretName: {
                    required: true,
                    serializedName: "secretName",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceServicePrincipalProfile = {
        serializedName: "ContainerServiceServicePrincipalProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceServicePrincipalProfile",
            modelProperties: {
                clientId: {
                    required: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                secret: {
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                },
                keyVaultSecretRef: {
                    serializedName: "keyVaultSecretRef",
                    type: {
                        name: "Composite",
                        className: "KeyVaultSecretRef"
                    }
                }
            }
        }
    };
    var ContainerServiceOrchestratorProfile = {
        serializedName: "ContainerServiceOrchestratorProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceOrchestratorProfile",
            modelProperties: {
                orchestratorType: {
                    required: true,
                    serializedName: "orchestratorType",
                    type: {
                        name: "String"
                    }
                },
                orchestratorVersion: {
                    serializedName: "orchestratorVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceMasterProfile = {
        serializedName: "ContainerServiceMasterProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceMasterProfile",
            modelProperties: {
                count: {
                    serializedName: "count",
                    defaultValue: 1,
                    type: {
                        name: "Number"
                    }
                },
                dnsPrefix: {
                    required: true,
                    serializedName: "dnsPrefix",
                    type: {
                        name: "String"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                osDiskSizeGB: {
                    serializedName: "osDiskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                vnetSubnetID: {
                    serializedName: "vnetSubnetID",
                    type: {
                        name: "String"
                    }
                },
                firstConsecutiveStaticIP: {
                    serializedName: "firstConsecutiveStaticIP",
                    defaultValue: '10.240.255.5',
                    type: {
                        name: "String"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceAgentPoolProfile = {
        serializedName: "ContainerServiceAgentPoolProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceAgentPoolProfile",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                osDiskSizeGB: {
                    serializedName: "osDiskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                dnsPrefix: {
                    serializedName: "dnsPrefix",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                },
                ports: {
                    serializedName: "ports",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "String"
                    }
                },
                vnetSubnetID: {
                    serializedName: "vnetSubnetID",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceWindowsProfile = {
        serializedName: "ContainerServiceWindowsProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceWindowsProfile",
            modelProperties: {
                adminUsername: {
                    required: true,
                    serializedName: "adminUsername",
                    constraints: {
                        Pattern: /^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$/
                    },
                    type: {
                        name: "String"
                    }
                },
                adminPassword: {
                    required: true,
                    serializedName: "adminPassword",
                    constraints: {
                        Pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\^&\*\(\)])[a-zA-Z\d!@#$%\^&\*\(\)]{12,123}$/
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceSshPublicKey = {
        serializedName: "ContainerServiceSshPublicKey",
        type: {
            name: "Composite",
            className: "ContainerServiceSshPublicKey",
            modelProperties: {
                keyData: {
                    required: true,
                    serializedName: "keyData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceSshConfiguration = {
        serializedName: "ContainerServiceSshConfiguration",
        type: {
            name: "Composite",
            className: "ContainerServiceSshConfiguration",
            modelProperties: {
                publicKeys: {
                    required: true,
                    serializedName: "publicKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerServiceSshPublicKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerServiceLinuxProfile = {
        serializedName: "ContainerServiceLinuxProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceLinuxProfile",
            modelProperties: {
                adminUsername: {
                    required: true,
                    serializedName: "adminUsername",
                    constraints: {
                        Pattern: /^[A-Za-z][-A-Za-z0-9_]*$/
                    },
                    type: {
                        name: "String"
                    }
                },
                ssh: {
                    required: true,
                    serializedName: "ssh",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceSshConfiguration"
                    }
                }
            }
        }
    };
    var ContainerServiceVMDiagnostics = {
        serializedName: "ContainerServiceVMDiagnostics",
        type: {
            name: "Composite",
            className: "ContainerServiceVMDiagnostics",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                storageUri: {
                    readOnly: true,
                    serializedName: "storageUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceDiagnosticsProfile = {
        serializedName: "ContainerServiceDiagnosticsProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceDiagnosticsProfile",
            modelProperties: {
                vmDiagnostics: {
                    required: true,
                    serializedName: "vmDiagnostics",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceVMDiagnostics"
                    }
                }
            }
        }
    };
    var ContainerService = {
        serializedName: "ContainerService",
        type: {
            name: "Composite",
            className: "ContainerService",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, orchestratorProfile: {
                    required: true,
                    serializedName: "properties.orchestratorProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceOrchestratorProfile"
                    }
                }, customProfile: {
                    serializedName: "properties.customProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceCustomProfile"
                    }
                }, servicePrincipalProfile: {
                    serializedName: "properties.servicePrincipalProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceServicePrincipalProfile"
                    }
                }, masterProfile: {
                    required: true,
                    serializedName: "properties.masterProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceMasterProfile"
                    }
                }, agentPoolProfiles: {
                    serializedName: "properties.agentPoolProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerServiceAgentPoolProfile"
                            }
                        }
                    }
                }, windowsProfile: {
                    serializedName: "properties.windowsProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceWindowsProfile"
                    }
                }, linuxProfile: {
                    required: true,
                    serializedName: "properties.linuxProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceLinuxProfile"
                    }
                }, diagnosticsProfile: {
                    serializedName: "properties.diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceDiagnosticsProfile"
                    }
                } })
        }
    };
    var OperationValue = {
        serializedName: "OperationValue",
        type: {
            name: "Composite",
            className: "OperationValue",
            modelProperties: {
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "display.operation",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "display.resource",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "display.description",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    readOnly: true,
                    serializedName: "display.provider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedClusterServicePrincipalProfile = {
        serializedName: "ManagedClusterServicePrincipalProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterServicePrincipalProfile",
            modelProperties: {
                clientId: {
                    required: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                secret: {
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedClusterAgentPoolProfileProperties = {
        serializedName: "ManagedClusterAgentPoolProfileProperties",
        type: {
            name: "Composite",
            className: "ManagedClusterAgentPoolProfileProperties",
            modelProperties: {
                count: {
                    required: true,
                    serializedName: "count",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                osDiskSizeGB: {
                    serializedName: "osDiskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                vnetSubnetID: {
                    serializedName: "vnetSubnetID",
                    type: {
                        name: "String"
                    }
                },
                maxPods: {
                    serializedName: "maxPods",
                    type: {
                        name: "Number"
                    }
                },
                osType: {
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                },
                maxCount: {
                    serializedName: "maxCount",
                    type: {
                        name: "Number"
                    }
                },
                minCount: {
                    serializedName: "minCount",
                    type: {
                        name: "Number"
                    }
                },
                enableAutoScaling: {
                    serializedName: "enableAutoScaling",
                    type: {
                        name: "Boolean"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                orchestratorVersion: {
                    serializedName: "orchestratorVersion",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                availabilityZones: {
                    serializedName: "availabilityZones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedClusterAgentPoolProfile = {
        serializedName: "ManagedClusterAgentPoolProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterAgentPoolProfile",
            modelProperties: __assign({}, ManagedClusterAgentPoolProfileProperties.type.modelProperties, { name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        Pattern: /^[a-z][a-z0-9]{0,11}$/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AgentPool = {
        serializedName: "AgentPool",
        type: {
            name: "Composite",
            className: "AgentPool",
            modelProperties: __assign({}, SubResource.type.modelProperties, { count: {
                    required: true,
                    serializedName: "properties.count",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, vmSize: {
                    required: true,
                    serializedName: "properties.vmSize",
                    type: {
                        name: "String"
                    }
                }, osDiskSizeGB: {
                    serializedName: "properties.osDiskSizeGB",
                    type: {
                        name: "Number"
                    }
                }, vnetSubnetID: {
                    serializedName: "properties.vnetSubnetID",
                    type: {
                        name: "String"
                    }
                }, maxPods: {
                    serializedName: "properties.maxPods",
                    type: {
                        name: "Number"
                    }
                }, osType: {
                    serializedName: "properties.osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                }, maxCount: {
                    serializedName: "properties.maxCount",
                    type: {
                        name: "Number"
                    }
                }, minCount: {
                    serializedName: "properties.minCount",
                    type: {
                        name: "Number"
                    }
                }, enableAutoScaling: {
                    serializedName: "properties.enableAutoScaling",
                    type: {
                        name: "Boolean"
                    }
                }, agentPoolType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, orchestratorVersion: {
                    serializedName: "properties.orchestratorVersion",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, availabilityZones: {
                    serializedName: "properties.availabilityZones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ContainerServiceNetworkProfile = {
        serializedName: "ContainerServiceNetworkProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceNetworkProfile",
            modelProperties: {
                networkPlugin: {
                    serializedName: "networkPlugin",
                    defaultValue: 'kubenet',
                    type: {
                        name: "String"
                    }
                },
                networkPolicy: {
                    serializedName: "networkPolicy",
                    type: {
                        name: "String"
                    }
                },
                podCidr: {
                    serializedName: "podCidr",
                    defaultValue: '10.244.0.0/16',
                    constraints: {
                        Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
                    },
                    type: {
                        name: "String"
                    }
                },
                serviceCidr: {
                    serializedName: "serviceCidr",
                    defaultValue: '10.0.0.0/16',
                    constraints: {
                        Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
                    },
                    type: {
                        name: "String"
                    }
                },
                dnsServiceIP: {
                    serializedName: "dnsServiceIP",
                    defaultValue: '10.0.0.10',
                    constraints: {
                        Pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
                    },
                    type: {
                        name: "String"
                    }
                },
                dockerBridgeCidr: {
                    serializedName: "dockerBridgeCidr",
                    defaultValue: '172.17.0.1/16',
                    constraints: {
                        Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedClusterAddonProfile = {
        serializedName: "ManagedClusterAddonProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterAddonProfile",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                config: {
                    serializedName: "config",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedClusterAADProfile = {
        serializedName: "ManagedClusterAADProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterAADProfile",
            modelProperties: {
                clientAppID: {
                    required: true,
                    serializedName: "clientAppID",
                    type: {
                        name: "String"
                    }
                },
                serverAppID: {
                    required: true,
                    serializedName: "serverAppID",
                    type: {
                        name: "String"
                    }
                },
                serverAppSecret: {
                    serializedName: "serverAppSecret",
                    type: {
                        name: "String"
                    }
                },
                tenantID: {
                    serializedName: "tenantID",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedCluster = {
        serializedName: "ManagedCluster",
        type: {
            name: "Composite",
            className: "ManagedCluster",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, kubernetesVersion: {
                    serializedName: "properties.kubernetesVersion",
                    type: {
                        name: "String"
                    }
                }, dnsPrefix: {
                    serializedName: "properties.dnsPrefix",
                    type: {
                        name: "String"
                    }
                }, fqdn: {
                    readOnly: true,
                    serializedName: "properties.fqdn",
                    type: {
                        name: "String"
                    }
                }, agentPoolProfiles: {
                    serializedName: "properties.agentPoolProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedClusterAgentPoolProfile"
                            }
                        }
                    }
                }, linuxProfile: {
                    serializedName: "properties.linuxProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceLinuxProfile"
                    }
                }, servicePrincipalProfile: {
                    serializedName: "properties.servicePrincipalProfile",
                    type: {
                        name: "Composite",
                        className: "ManagedClusterServicePrincipalProfile"
                    }
                }, addonProfiles: {
                    serializedName: "properties.addonProfiles",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ManagedClusterAddonProfile"
                            }
                        }
                    }
                }, nodeResourceGroup: {
                    readOnly: true,
                    serializedName: "properties.nodeResourceGroup",
                    type: {
                        name: "String"
                    }
                }, enableRBAC: {
                    serializedName: "properties.enableRBAC",
                    type: {
                        name: "Boolean"
                    }
                }, enablePodSecurityPolicy: {
                    serializedName: "properties.enablePodSecurityPolicy",
                    type: {
                        name: "Boolean"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceNetworkProfile"
                    }
                }, aadProfile: {
                    serializedName: "properties.aadProfile",
                    type: {
                        name: "Composite",
                        className: "ManagedClusterAADProfile"
                    }
                }, apiServerAuthorizedIPRanges: {
                    serializedName: "properties.apiServerAuthorizedIPRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var OrchestratorProfile = {
        serializedName: "OrchestratorProfile",
        type: {
            name: "Composite",
            className: "OrchestratorProfile",
            modelProperties: {
                orchestratorType: {
                    required: true,
                    serializedName: "orchestratorType",
                    type: {
                        name: "String"
                    }
                },
                orchestratorVersion: {
                    required: true,
                    serializedName: "orchestratorVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedClusterAccessProfile = {
        serializedName: "ManagedClusterAccessProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterAccessProfile",
            modelProperties: __assign({}, Resource.type.modelProperties, { kubeConfig: {
                    serializedName: "properties.kubeConfig",
                    type: {
                        name: "ByteArray"
                    }
                } })
        }
    };
    var ManagedClusterPoolUpgradeProfile = {
        serializedName: "ManagedClusterPoolUpgradeProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterPoolUpgradeProfile",
            modelProperties: {
                kubernetesVersion: {
                    required: true,
                    serializedName: "kubernetesVersion",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    required: true,
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                },
                upgrades: {
                    serializedName: "upgrades",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedClusterUpgradeProfile = {
        serializedName: "ManagedClusterUpgradeProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterUpgradeProfile",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                controlPlaneProfile: {
                    required: true,
                    serializedName: "properties.controlPlaneProfile",
                    type: {
                        name: "Composite",
                        className: "ManagedClusterPoolUpgradeProfile"
                    }
                },
                agentPoolProfiles: {
                    required: true,
                    serializedName: "properties.agentPoolProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedClusterPoolUpgradeProfile"
                            }
                        }
                    }
                }
            }
        }
    };
    var CredentialResult = {
        serializedName: "CredentialResult",
        type: {
            name: "Composite",
            className: "CredentialResult",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "ByteArray"
                    }
                }
            }
        }
    };
    var CredentialResults = {
        serializedName: "CredentialResults",
        type: {
            name: "Composite",
            className: "CredentialResults",
            modelProperties: {
                kubeconfigs: {
                    readOnly: true,
                    serializedName: "kubeconfigs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CredentialResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var OrchestratorVersionProfile = {
        serializedName: "OrchestratorVersionProfile",
        type: {
            name: "Composite",
            className: "OrchestratorVersionProfile",
            modelProperties: {
                orchestratorType: {
                    required: true,
                    serializedName: "orchestratorType",
                    type: {
                        name: "String"
                    }
                },
                orchestratorVersion: {
                    required: true,
                    serializedName: "orchestratorVersion",
                    type: {
                        name: "String"
                    }
                },
                default: {
                    required: true,
                    serializedName: "default",
                    type: {
                        name: "Boolean"
                    }
                },
                upgrades: {
                    required: true,
                    serializedName: "upgrades",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrchestratorProfile"
                            }
                        }
                    }
                }
            }
        }
    };
    var OrchestratorVersionProfileListResult = {
        serializedName: "OrchestratorVersionProfileListResult",
        type: {
            name: "Composite",
            className: "OrchestratorVersionProfileListResult",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                orchestrators: {
                    required: true,
                    serializedName: "properties.orchestrators",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrchestratorVersionProfile"
                            }
                        }
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterListResult = {
        serializedName: "OpenShiftManagedClusterListResult",
        type: {
            name: "Composite",
            className: "OpenShiftManagedClusterListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OpenShiftManagedCluster"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceListResult = {
        serializedName: "ContainerServiceListResult",
        type: {
            name: "Composite",
            className: "ContainerServiceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerService"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedClusterListResult = {
        serializedName: "ManagedClusterListResult",
        type: {
            name: "Composite",
            className: "ManagedClusterListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedCluster"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AgentPoolListResult = {
        serializedName: "AgentPoolListResult",
        type: {
            name: "Composite",
            className: "AgentPoolListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AgentPool"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'OpenShiftManagedClusterBaseIdentityProvider': OpenShiftManagedClusterBaseIdentityProvider,
        'OpenShiftManagedClusterBaseIdentityProvider.AADIdentityProvider': OpenShiftManagedClusterAADIdentityProvider
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        PurchasePlan: PurchasePlan,
        OpenShiftRouterProfile: OpenShiftRouterProfile,
        NetworkProfile: NetworkProfile,
        OpenShiftManagedClusterMasterPoolProfile: OpenShiftManagedClusterMasterPoolProfile,
        OpenShiftManagedClusterAgentPoolProfile: OpenShiftManagedClusterAgentPoolProfile,
        OpenShiftManagedClusterBaseIdentityProvider: OpenShiftManagedClusterBaseIdentityProvider,
        OpenShiftManagedClusterIdentityProvider: OpenShiftManagedClusterIdentityProvider,
        OpenShiftManagedClusterAuthProfile: OpenShiftManagedClusterAuthProfile,
        OpenShiftManagedCluster: OpenShiftManagedCluster,
        OpenShiftManagedClusterAADIdentityProvider: OpenShiftManagedClusterAADIdentityProvider,
        TagsObject: TagsObject,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        KeyVaultSecretRef: KeyVaultSecretRef,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerService: ContainerService,
        OperationValue: OperationValue,
        SubResource: SubResource,
        ManagedClusterServicePrincipalProfile: ManagedClusterServicePrincipalProfile,
        ManagedClusterAgentPoolProfileProperties: ManagedClusterAgentPoolProfileProperties,
        ManagedClusterAgentPoolProfile: ManagedClusterAgentPoolProfile,
        AgentPool: AgentPool,
        ContainerServiceNetworkProfile: ContainerServiceNetworkProfile,
        ManagedClusterAddonProfile: ManagedClusterAddonProfile,
        ManagedClusterAADProfile: ManagedClusterAADProfile,
        ManagedCluster: ManagedCluster,
        OrchestratorProfile: OrchestratorProfile,
        ManagedClusterAccessProfile: ManagedClusterAccessProfile,
        ManagedClusterPoolUpgradeProfile: ManagedClusterPoolUpgradeProfile,
        ManagedClusterUpgradeProfile: ManagedClusterUpgradeProfile,
        CredentialResult: CredentialResult,
        CredentialResults: CredentialResults,
        OrchestratorVersionProfile: OrchestratorVersionProfile,
        OrchestratorVersionProfileListResult: OrchestratorVersionProfileListResult,
        OpenShiftManagedClusterListResult: OpenShiftManagedClusterListResult,
        ContainerServiceListResult: ContainerServiceListResult,
        OperationListResult: OperationListResult,
        ManagedClusterListResult: ManagedClusterListResult,
        AgentPoolListResult: AgentPoolListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AgentPool: AgentPool,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ContainerService: ContainerService,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceNetworkProfile: ContainerServiceNetworkProfile,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        KeyVaultSecretRef: KeyVaultSecretRef,
        ManagedCluster: ManagedCluster,
        ManagedClusterAADProfile: ManagedClusterAADProfile,
        ManagedClusterAccessProfile: ManagedClusterAccessProfile,
        ManagedClusterAddonProfile: ManagedClusterAddonProfile,
        ManagedClusterAgentPoolProfile: ManagedClusterAgentPoolProfile,
        ManagedClusterAgentPoolProfileProperties: ManagedClusterAgentPoolProfileProperties,
        ManagedClusterServicePrincipalProfile: ManagedClusterServicePrincipalProfile,
        NetworkProfile: NetworkProfile,
        OpenShiftManagedCluster: OpenShiftManagedCluster,
        OpenShiftManagedClusterAADIdentityProvider: OpenShiftManagedClusterAADIdentityProvider,
        OpenShiftManagedClusterAgentPoolProfile: OpenShiftManagedClusterAgentPoolProfile,
        OpenShiftManagedClusterAuthProfile: OpenShiftManagedClusterAuthProfile,
        OpenShiftManagedClusterBaseIdentityProvider: OpenShiftManagedClusterBaseIdentityProvider,
        OpenShiftManagedClusterIdentityProvider: OpenShiftManagedClusterIdentityProvider,
        OpenShiftManagedClusterListResult: OpenShiftManagedClusterListResult,
        OpenShiftManagedClusterMasterPoolProfile: OpenShiftManagedClusterMasterPoolProfile,
        OpenShiftRouterProfile: OpenShiftRouterProfile,
        PurchasePlan: PurchasePlan,
        Resource: Resource,
        SubResource: SubResource,
        TagsObject: TagsObject
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var agentPoolName = {
        parameterPath: "agentPoolName",
        mapper: {
            required: true,
            serializedName: "agentPoolName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-09-30-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-07-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-09-30',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2019-02-01',
            type: {
                name: "String"
            }
        }
    };
    var containerServiceName = {
        parameterPath: "containerServiceName",
        mapper: {
            required: true,
            serializedName: "containerServiceName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var managedClusterName = {
        parameterPath: "managedClusterName",
        mapper: {
            required: true,
            serializedName: "managedClusterName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName0 = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName1 = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceType = {
        parameterPath: [
            "options",
            "resourceType"
        ],
        mapper: {
            serializedName: "resource-type",
            type: {
                name: "String"
            }
        }
    };
    var roleName = {
        parameterPath: "roleName",
        mapper: {
            required: true,
            serializedName: "roleName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a OpenShiftManagedClusters. */
    var OpenShiftManagedClusters = /** @class */ (function () {
        /**
         * Create a OpenShiftManagedClusters.
         * @param {ContainerServiceClientContext} client Reference to the service client.
         */
        function OpenShiftManagedClusters(client) {
            this.client = client;
        }
        OpenShiftManagedClusters.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        OpenShiftManagedClusters.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        OpenShiftManagedClusters.prototype.get = function (resourceGroupName, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates or updates a OpenShift managed cluster with the specified configuration for agents and
         * OpenShift version.
         * @summary Creates or updates an OpenShift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the OpenShift managed cluster resource.
         * @param parameters Parameters supplied to the Create or Update an OpenShift Managed Cluster
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.OpenShiftManagedClustersCreateOrUpdateResponse>
         */
        OpenShiftManagedClusters.prototype.createOrUpdate = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an OpenShift managed cluster with the specified tags.
         * @summary Updates tags on an OpenShift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the OpenShift managed cluster resource.
         * @param parameters Parameters supplied to the Update OpenShift Managed Cluster Tags operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.OpenShiftManagedClustersUpdateTagsResponse>
         */
        OpenShiftManagedClusters.prototype.updateTags = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the OpenShift managed cluster with a specified resource group and name.
         * @summary Deletes an OpenShift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the OpenShift managed cluster resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        OpenShiftManagedClusters.prototype.deleteMethod = function (resourceGroupName, resourceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a OpenShift managed cluster with the specified configuration for agents and
         * OpenShift version.
         * @summary Creates or updates an OpenShift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the OpenShift managed cluster resource.
         * @param parameters Parameters supplied to the Create or Update an OpenShift Managed Cluster
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OpenShiftManagedClusters.prototype.beginCreateOrUpdate = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Updates an OpenShift managed cluster with the specified tags.
         * @summary Updates tags on an OpenShift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the OpenShift managed cluster resource.
         * @param parameters Parameters supplied to the Update OpenShift Managed Cluster Tags operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OpenShiftManagedClusters.prototype.beginUpdateTags = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec, options);
        };
        /**
         * Deletes the OpenShift managed cluster with a specified resource group and name.
         * @summary Deletes an OpenShift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the OpenShift managed cluster resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OpenShiftManagedClusters.prototype.beginDeleteMethod = function (resourceGroupName, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        OpenShiftManagedClusters.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        OpenShiftManagedClusters.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return OpenShiftManagedClusters;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/openShiftManagedClusters",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OpenShiftManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters",
        urlParameters: [
            subscriptionId,
            resourceGroupName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OpenShiftManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OpenShiftManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, OpenShiftManagedCluster, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OpenShiftManagedCluster
            },
            201: {
                bodyMapper: OpenShiftManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdateTagsOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OpenShiftManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OpenShiftManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OpenShiftManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AgentPool: AgentPool,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ContainerService: ContainerService,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceListResult: ContainerServiceListResult,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceNetworkProfile: ContainerServiceNetworkProfile,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        KeyVaultSecretRef: KeyVaultSecretRef,
        ManagedCluster: ManagedCluster,
        ManagedClusterAADProfile: ManagedClusterAADProfile,
        ManagedClusterAccessProfile: ManagedClusterAccessProfile,
        ManagedClusterAddonProfile: ManagedClusterAddonProfile,
        ManagedClusterAgentPoolProfile: ManagedClusterAgentPoolProfile,
        ManagedClusterAgentPoolProfileProperties: ManagedClusterAgentPoolProfileProperties,
        ManagedClusterServicePrincipalProfile: ManagedClusterServicePrincipalProfile,
        NetworkProfile: NetworkProfile,
        OpenShiftManagedCluster: OpenShiftManagedCluster,
        OpenShiftManagedClusterAADIdentityProvider: OpenShiftManagedClusterAADIdentityProvider,
        OpenShiftManagedClusterAgentPoolProfile: OpenShiftManagedClusterAgentPoolProfile,
        OpenShiftManagedClusterAuthProfile: OpenShiftManagedClusterAuthProfile,
        OpenShiftManagedClusterBaseIdentityProvider: OpenShiftManagedClusterBaseIdentityProvider,
        OpenShiftManagedClusterIdentityProvider: OpenShiftManagedClusterIdentityProvider,
        OpenShiftManagedClusterMasterPoolProfile: OpenShiftManagedClusterMasterPoolProfile,
        OpenShiftRouterProfile: OpenShiftRouterProfile,
        OrchestratorProfile: OrchestratorProfile,
        OrchestratorVersionProfile: OrchestratorVersionProfile,
        OrchestratorVersionProfileListResult: OrchestratorVersionProfileListResult,
        PurchasePlan: PurchasePlan,
        Resource: Resource,
        SubResource: SubResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ContainerServices. */
    var ContainerServices = /** @class */ (function () {
        /**
         * Create a ContainerServices.
         * @param {ContainerServiceClientContext} client Reference to the service client.
         */
        function ContainerServices(client) {
            this.client = client;
        }
        ContainerServices.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        /**
         * Creates or updates a container service with the specified configuration of orchestrator,
         * masters, and agents.
         * @summary Creates or updates a container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param parameters Parameters supplied to the Create or Update a Container Service operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ContainerServicesCreateOrUpdateResponse>
         */
        ContainerServices.prototype.createOrUpdate = function (resourceGroupName, containerServiceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, containerServiceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerServices.prototype.get = function (resourceGroupName, containerServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                containerServiceName: containerServiceName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Deletes the specified container service in the specified subscription and resource group. The
         * operation does not delete other resources created as part of creating a container service,
         * including storage accounts, VMs, and availability sets. All the other resources created with the
         * container service are part of the same resource group and can be deleted individually.
         * @summary Deletes the specified container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ContainerServices.prototype.deleteMethod = function (resourceGroupName, containerServiceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, containerServiceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerServices.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        ContainerServices.prototype.listOrchestrators = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, listOrchestratorsOperationSpec, callback);
        };
        /**
         * Creates or updates a container service with the specified configuration of orchestrator,
         * masters, and agents.
         * @summary Creates or updates a container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param parameters Parameters supplied to the Create or Update a Container Service operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerServices.prototype.beginCreateOrUpdate = function (resourceGroupName, containerServiceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                containerServiceName: containerServiceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes the specified container service in the specified subscription and resource group. The
         * operation does not delete other resources created as part of creating a container service,
         * including storage accounts, VMs, and availability sets. All the other resources created with the
         * container service are part of the same resource group and can be deleted individually.
         * @summary Deletes the specified container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerServices.prototype.beginDeleteMethod = function (resourceGroupName, containerServiceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                containerServiceName: containerServiceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        ContainerServices.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        ContainerServices.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        return ContainerServices;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/containerServices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
        urlParameters: [
            resourceGroupName1,
            containerServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices",
        urlParameters: [
            resourceGroupName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOrchestratorsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/orchestrators",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion2,
            resourceType
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OrchestratorVersionProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
        urlParameters: [
            resourceGroupName1,
            containerServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ContainerService, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContainerService
            },
            201: {
                bodyMapper: ContainerService
            },
            202: {
                bodyMapper: ContainerService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
        urlParameters: [
            resourceGroupName1,
            containerServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CloudError: CloudError,
        OperationListResult: OperationListResult,
        OperationValue: OperationValue
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ContainerServiceClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.ContainerService/operations",
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AgentPool: AgentPool,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ContainerService: ContainerService,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceNetworkProfile: ContainerServiceNetworkProfile,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        CredentialResult: CredentialResult,
        CredentialResults: CredentialResults,
        KeyVaultSecretRef: KeyVaultSecretRef,
        ManagedCluster: ManagedCluster,
        ManagedClusterAADProfile: ManagedClusterAADProfile,
        ManagedClusterAccessProfile: ManagedClusterAccessProfile,
        ManagedClusterAddonProfile: ManagedClusterAddonProfile,
        ManagedClusterAgentPoolProfile: ManagedClusterAgentPoolProfile,
        ManagedClusterAgentPoolProfileProperties: ManagedClusterAgentPoolProfileProperties,
        ManagedClusterListResult: ManagedClusterListResult,
        ManagedClusterPoolUpgradeProfile: ManagedClusterPoolUpgradeProfile,
        ManagedClusterServicePrincipalProfile: ManagedClusterServicePrincipalProfile,
        ManagedClusterUpgradeProfile: ManagedClusterUpgradeProfile,
        NetworkProfile: NetworkProfile,
        OpenShiftManagedCluster: OpenShiftManagedCluster,
        OpenShiftManagedClusterAADIdentityProvider: OpenShiftManagedClusterAADIdentityProvider,
        OpenShiftManagedClusterAgentPoolProfile: OpenShiftManagedClusterAgentPoolProfile,
        OpenShiftManagedClusterAuthProfile: OpenShiftManagedClusterAuthProfile,
        OpenShiftManagedClusterBaseIdentityProvider: OpenShiftManagedClusterBaseIdentityProvider,
        OpenShiftManagedClusterIdentityProvider: OpenShiftManagedClusterIdentityProvider,
        OpenShiftManagedClusterMasterPoolProfile: OpenShiftManagedClusterMasterPoolProfile,
        OpenShiftRouterProfile: OpenShiftRouterProfile,
        PurchasePlan: PurchasePlan,
        Resource: Resource,
        SubResource: SubResource,
        TagsObject: TagsObject
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedClusters. */
    var ManagedClusters = /** @class */ (function () {
        /**
         * Create a ManagedClusters.
         * @param {ContainerServiceClientContext} client Reference to the service client.
         */
        function ManagedClusters(client) {
            this.client = client;
        }
        ManagedClusters.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        ManagedClusters.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        ManagedClusters.prototype.getUpgradeProfile = function (resourceGroupName, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                options: options
            }, getUpgradeProfileOperationSpec, callback);
        };
        ManagedClusters.prototype.getAccessProfile = function (resourceGroupName, resourceName$$1, roleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                roleName: roleName$$1,
                options: options
            }, getAccessProfileOperationSpec, callback);
        };
        ManagedClusters.prototype.listClusterAdminCredentials = function (resourceGroupName, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                options: options
            }, listClusterAdminCredentialsOperationSpec, callback);
        };
        ManagedClusters.prototype.listClusterUserCredentials = function (resourceGroupName, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                options: options
            }, listClusterUserCredentialsOperationSpec, callback);
        };
        ManagedClusters.prototype.get = function (resourceGroupName, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates or updates a managed cluster with the specified configuration for agents and Kubernetes
         * version.
         * @summary Creates or updates a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Create or Update a Managed Cluster operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedClustersCreateOrUpdateResponse>
         */
        ManagedClusters.prototype.createOrUpdate = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a managed cluster with the specified tags.
         * @summary Updates tags on a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Update Managed Cluster Tags operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedClustersUpdateTagsResponse>
         */
        ManagedClusters.prototype.updateTags = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the managed cluster with a specified resource group and name.
         * @summary Deletes a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedClusters.prototype.deleteMethod = function (resourceGroupName, resourceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update the service principal Profile for a managed cluster.
         * @summary Reset Service Principal Profile of a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Reset Service Principal Profile operation for a
         * Managed Cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedClusters.prototype.resetServicePrincipalProfile = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.beginResetServicePrincipalProfile(resourceGroupName, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update the AAD Profile for a managed cluster.
         * @summary Reset AAD Profile of a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Reset AAD Profile operation for a Managed Cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedClusters.prototype.resetAADProfile = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.beginResetAADProfile(resourceGroupName, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a managed cluster with the specified configuration for agents and Kubernetes
         * version.
         * @summary Creates or updates a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Create or Update a Managed Cluster operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedClusters.prototype.beginCreateOrUpdate = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Updates a managed cluster with the specified tags.
         * @summary Updates tags on a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Update Managed Cluster Tags operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedClusters.prototype.beginUpdateTags = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$1, options);
        };
        /**
         * Deletes the managed cluster with a specified resource group and name.
         * @summary Deletes a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedClusters.prototype.beginDeleteMethod = function (resourceGroupName, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Update the service principal Profile for a managed cluster.
         * @summary Reset Service Principal Profile of a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Reset Service Principal Profile operation for a
         * Managed Cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedClusters.prototype.beginResetServicePrincipalProfile = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginResetServicePrincipalProfileOperationSpec, options);
        };
        /**
         * Update the AAD Profile for a managed cluster.
         * @summary Reset AAD Profile of a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Reset AAD Profile operation for a Managed Cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedClusters.prototype.beginResetAADProfile = function (resourceGroupName, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginResetAADProfileOperationSpec, options);
        };
        ManagedClusters.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        ManagedClusters.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        return ManagedClusters;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/managedClusters",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters",
        urlParameters: [
            subscriptionId,
            resourceGroupName0
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getUpgradeProfileOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/upgradeProfiles/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterUpgradeProfile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getAccessProfileOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/accessProfiles/{roleName}/listCredential",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName,
            roleName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterAccessProfile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listClusterAdminCredentialsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterAdminCredential",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CredentialResults
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listClusterUserCredentialsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterUserCredential",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CredentialResults
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedCluster, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedCluster
            },
            201: {
                bodyMapper: ManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginUpdateTagsOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginResetServicePrincipalProfileOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/resetServicePrincipalProfile",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedClusterServicePrincipalProfile, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginResetAADProfileOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/resetAADProfile",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedClusterAADProfile, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AgentPool: AgentPool,
        AgentPoolListResult: AgentPoolListResult,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ContainerService: ContainerService,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceNetworkProfile: ContainerServiceNetworkProfile,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        KeyVaultSecretRef: KeyVaultSecretRef,
        ManagedCluster: ManagedCluster,
        ManagedClusterAADProfile: ManagedClusterAADProfile,
        ManagedClusterAccessProfile: ManagedClusterAccessProfile,
        ManagedClusterAddonProfile: ManagedClusterAddonProfile,
        ManagedClusterAgentPoolProfile: ManagedClusterAgentPoolProfile,
        ManagedClusterAgentPoolProfileProperties: ManagedClusterAgentPoolProfileProperties,
        ManagedClusterServicePrincipalProfile: ManagedClusterServicePrincipalProfile,
        NetworkProfile: NetworkProfile,
        OpenShiftManagedCluster: OpenShiftManagedCluster,
        OpenShiftManagedClusterAADIdentityProvider: OpenShiftManagedClusterAADIdentityProvider,
        OpenShiftManagedClusterAgentPoolProfile: OpenShiftManagedClusterAgentPoolProfile,
        OpenShiftManagedClusterAuthProfile: OpenShiftManagedClusterAuthProfile,
        OpenShiftManagedClusterBaseIdentityProvider: OpenShiftManagedClusterBaseIdentityProvider,
        OpenShiftManagedClusterIdentityProvider: OpenShiftManagedClusterIdentityProvider,
        OpenShiftManagedClusterMasterPoolProfile: OpenShiftManagedClusterMasterPoolProfile,
        OpenShiftRouterProfile: OpenShiftRouterProfile,
        PurchasePlan: PurchasePlan,
        Resource: Resource,
        SubResource: SubResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AgentPools. */
    var AgentPools = /** @class */ (function () {
        /**
         * Create a AgentPools.
         * @param {ContainerServiceClientContext} client Reference to the service client.
         */
        function AgentPools(client) {
            this.client = client;
        }
        AgentPools.prototype.list = function (resourceGroupName, managedClusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedClusterName: managedClusterName$$1,
                options: options
            }, listOperationSpec$4, callback);
        };
        AgentPools.prototype.get = function (resourceGroupName, managedClusterName$$1, agentPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                managedClusterName: managedClusterName$$1,
                agentPoolName: agentPoolName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Creates or updates an agent pool in the specified managed cluster.
         * @summary Creates or updates an agent pool.
         * @param resourceGroupName The name of the resource group.
         * @param managedClusterName The name of the managed cluster resource.
         * @param agentPoolName The name of the agent pool.
         * @param parameters Parameters supplied to the Create or Update an agent pool operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.AgentPoolsCreateOrUpdateResponse>
         */
        AgentPools.prototype.createOrUpdate = function (resourceGroupName, managedClusterName$$1, agentPoolName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, managedClusterName$$1, agentPoolName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the agent pool in the specified managed cluster.
         * @summary Deletes an agent pool.
         * @param resourceGroupName The name of the resource group.
         * @param managedClusterName The name of the managed cluster resource.
         * @param agentPoolName The name of the agent pool.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        AgentPools.prototype.deleteMethod = function (resourceGroupName, managedClusterName$$1, agentPoolName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, managedClusterName$$1, agentPoolName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates an agent pool in the specified managed cluster.
         * @summary Creates or updates an agent pool.
         * @param resourceGroupName The name of the resource group.
         * @param managedClusterName The name of the managed cluster resource.
         * @param agentPoolName The name of the agent pool.
         * @param parameters Parameters supplied to the Create or Update an agent pool operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AgentPools.prototype.beginCreateOrUpdate = function (resourceGroupName, managedClusterName$$1, agentPoolName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedClusterName: managedClusterName$$1,
                agentPoolName: agentPoolName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Deletes the agent pool in the specified managed cluster.
         * @summary Deletes an agent pool.
         * @param resourceGroupName The name of the resource group.
         * @param managedClusterName The name of the managed cluster resource.
         * @param agentPoolName The name of the agent pool.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AgentPools.prototype.beginDeleteMethod = function (resourceGroupName, managedClusterName$$1, agentPoolName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                managedClusterName: managedClusterName$$1,
                agentPoolName: agentPoolName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        AgentPools.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return AgentPools;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{managedClusterName}/agentPools",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            managedClusterName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AgentPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{managedClusterName}/agentPools/{agentPoolName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            managedClusterName,
            agentPoolName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AgentPool
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{managedClusterName}/agentPools/{agentPoolName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            managedClusterName,
            agentPoolName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AgentPool, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AgentPool
            },
            201: {
                bodyMapper: AgentPool
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{managedClusterName}/agentPools/{agentPoolName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            managedClusterName,
            agentPoolName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AgentPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-containerservice";
    var packageVersion = "7.0.1";
    var ContainerServiceClientContext = /** @class */ (function (_super) {
        __extends(ContainerServiceClientContext, _super);
        /**
         * Initializes a new instance of the ContainerServiceClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ContainerServiceClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ContainerServiceClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ContainerServiceClient = /** @class */ (function (_super) {
        __extends(ContainerServiceClient, _super);
        /**
         * Initializes a new instance of the ContainerServiceClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ContainerServiceClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.openShiftManagedClusters = new OpenShiftManagedClusters(_this);
            _this.containerServices = new ContainerServices(_this);
            _this.operations = new Operations(_this);
            _this.managedClusters = new ManagedClusters(_this);
            _this.agentPools = new AgentPools(_this);
            return _this;
        }
        return ContainerServiceClient;
    }(ContainerServiceClientContext));

    exports.ContainerServiceClient = ContainerServiceClient;
    exports.ContainerServiceClientContext = ContainerServiceClientContext;
    exports.ContainerServiceModels = index;
    exports.ContainerServiceMappers = mappers;
    exports.OpenShiftManagedClusters = OpenShiftManagedClusters;
    exports.ContainerServices = ContainerServices;
    exports.Operations = Operations;
    exports.ManagedClusters = ManagedClusters;
    exports.AgentPools = AgentPools;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-containerservice.js.map
