{
	"name": "cloudcode",
	"displayName": "Cloud Code",
	"description": "Makes working with Kubernetes feel like editing and debugging local code. Cloud Code from Google Cloud, tools for Cloud Native development.",
	"version": "1.0.0",
	"publisher": "googlecloudtools",
	"engines": {
		"vscode": "^1.38.0"
	},
	"license": "SEE LICENSE IN LICENSE",
	"categories": [
		"Snippets",
		"Linters",
		"Debuggers",
		"Other",
		"Azure"
	],
	"keywords": [
		"Google",
		"Kubernetes",
		"k8s",
		"Azure",
		"AWS"
	],
	"preview": false,
	"qna": false,
	"icon": "images/logo.png",
	"activationEvents": [
		"*"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"languages": [
			{
				"id": "ignore",
				"filenames": [
					".gcloudignore"
				]
			},
			{
				"id": "Log",
				"aliases": [
					"log"
				],
				"extensions": [
					".log"
				],
				"configuration": "./log.configuration.json",
				"mimetypes": [
					"log",
					"text/log",
					"text/x-log",
					"text/x-code-output",
					"x-code-output"
				]
			}
		],
		"grammars": [
			{
				"language": "Log",
				"scopeName": "code.log",
				"path": "./syntaxes/log.tmLanguage"
			}
		],
		"configurationDefaults": {
			"[yaml]": {
				"editor.insertSpaces": true,
				"editor.tabSize": 2,
				"editor.quickSuggestions": {
					"other": true,
					"comments": false,
					"strings": true
				},
				"editor.autoIndent": false
			}
		},
		"configuration": {
			"type": "object",
			"title": "Cloud Code",
			"properties": {
				"cloudcode.debug-kubernetes": {
					"type": "object",
					"description": "Cloud Code Debug",
					"properties": {
						"cloudcode.debug-kubernetes.suppressNETCoreWarning": {
							"type": "boolean",
							"description": "If true, suppress .NET Core debug warning."
						},
						"cloudcode.debug-kubernetes.suppressJavaWarning": {
							"type": "boolean",
							"description": "If true, suppress Java debug warning."
						},
						"cloudcode.debug-kubernetes.suppressPythonWarning": {
							"type": "boolean",
							"description": "If true, suppress Python debug warning."
						},
						"cloudcode.debug-kubernetes.suppressNodeJSWarning": {
							"type": "boolean",
							"description": "If true, suppress Node JS debug warning."
						},
						"cloudcode.debug-kubernetes.suppressGoWarning": {
							"type": "boolean",
							"description": "If true, suppress Go debug warning."
						}
					}
				},
				"cloudcode.image-registry": {
					"type": "object",
					"description": "DEPRECATED: use cloudcode.profile-registry-map instead",
					"properties": {
						"cloudcode.image-registry.name": {
							"type": "string",
							"description": "DEPRECATED: use cloudcode.profile-registry-map instead"
						}
					}
				},
				"cloudcode.profile-registry-map": {
					"type": "object",
					"default": {},
					"description": "Image registry to use when deploying. Set per Skaffold profile, but needs not be unique."
				},
				"cloudcode.profile-cluster-map": {
					"type": "object",
					"default": {},
					"description": "Profile Cluster Mapping"
				},
				"cloudcode.last-used-context": {
					"type": "object",
					"default": {},
					"description": "Mapping of launch configuration and its last used context"
				},
				"cloudcode.kubeconfigs": {
					"type": "array",
					"default": [],
					"description": "Imported KubeConfigs"
				},
				"cloudcode.active-kubeconfig": {
					"type": "string",
					"default": "",
					"description": "Name of the active KubeConfig used by the extension. This name should match the name of a KubeConfig stored in cloudcode.kubeconfigs."
				},
				"cloudcode.default-app-directory": {
					"type": "object",
					"description": "Default App Directory",
					"properties": {
						"cloudcode.default-app-directory.location": {
							"type": "string",
							"description": "Default directory used when creating new applications"
						}
					}
				},
				"cloudcode.enableExperimentalDeploymentWizard": {
					"type": "boolean",
					"default": true,
					"description": "Enable the experimental deployment wizard that streamlines the deployment for existing kubernetes applications."
				},
				"cloudcode.enableDeployDebugV2": {
					"type": "boolean",
					"default": false,
					"description": "Enable the new deploy and debug flows."
				},
				"cloudcode.enableMultiSkaffoldConfigsKey": {
					"type": "boolean",
					"default": false,
					"description": "Enable support for multiple skaffold configurations."
				},
				"cloudcode.enableTelemetry": {
					"type": "boolean",
					"default": true,
					"description": "Enable usage data to be sent to Google."
				},
				"cloudcode.yaml.trace.server": {
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VSCode and the languageServerExample service."
				},
				"cloudcode.yaml.schemas": {
					"type": "object",
					"default": {},
					"description": "Associate schemas to YAML files in the current workspace"
				},
				"cloudcode.yaml.format.enable": {
					"type": "boolean",
					"default": false,
					"description": "Enable/disable default YAML formatter (requires restart)"
				},
				"cloudcode.yaml.format.singleQuote": {
					"type": "boolean",
					"default": false,
					"description": "Use single quotes instead of double quotes"
				},
				"cloudcode.yaml.format.bracketSpacing": {
					"type": "boolean",
					"default": true,
					"description": "Print spaces between brackets in objects"
				},
				"cloudcode.yaml.format.proseWrap": {
					"type": "string",
					"default": "preserve",
					"enum": [
						"preserve",
						"never",
						"always"
					],
					"description": "Always: wrap prose if it exceeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is"
				},
				"cloudcode.yaml.validate": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable validation feature"
				},
				"cloudcode.yaml.hover": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable hover feature"
				},
				"cloudcode.yaml.completion": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable completion feature"
				},
				"cloudcode.yaml.customTags": {
					"type": "array",
					"default": [],
					"description": "Custom tags for the parser to use"
				},
				"cloudcode.yaml.clusterResourceCompletion": {
					"type": "boolean",
					"default": true,
					"description": "Flag to enable resource completions from current cluster. (Completions might be slow)"
				},
				"cloudcode.yaml.yamlFileMatcher": {
					"type": "string",
					"default": "**/*.yaml",
					"description": "Should match YAML files that need to be considered for local resource completions"
				},
				"cloudcode.yaml.enableMigrateForAnthosSupport": {
					"type": "boolean",
					"default": true,
					"description": "Enables Migrate for Anthos YAML editing support"
				},
				"cloudcode.cloudshell.project": {
					"type": "string",
					"default": "",
					"description": "The default project to use in Cloud Shell if it is not set in the shell"
				},
				"cloudcode.gke": {
					"type": "object",
					"description": "Google Kubernetes Engine (GKE)",
					"properties": {
						"cloudcode.gke.projectIds": {
							"type": "array",
							"items": {
								"type": "string",
								"description": "List of Google Cloud project IDs that will be shown in the tree-view"
							}
						}
					},
					"default": {
						"projectIds": []
					}
				},
				"cloudcode.aws": {
					"type": "object",
					"description": "Amazon Elastic Container Service for Kubernetes (Amazon EKS)",
					"properties": {
						"cloudcode.aws.eksctlPath": {
							"type": "string",
							"description": "Path to the 'eksctl' binary"
						}
					},
					"default": {
						"eksctlPath": ""
					}
				},
				"cloudcode.awsExplorerVisible": {
					"type": "boolean",
					"default": false,
					"description": "Display the Amazon EKS cluster explorer"
				},
				"cloudcode.azureExplorerVisible": {
					"type": "boolean",
					"default": false,
					"description": "Display the Azure Kubernetes Service cluster explorer"
				},
				"cloudcode.autoDependencies": {
					"type": "string",
					"default": "ask",
					"enum": [
						"on",
						"off",
						"ask"
					],
					"description": "Use managed dependencies"
				},
				"cloudcode.verboseLogging": {
					"type": "boolean",
					"default": false,
					"description": "Cloud Code will log to output window"
				}
			}
		},
		"debuggers": [
			{
				"type": "cloudcode",
				"label": "Cloud Code Debug",
				"configurationAttributes": {
					"launch": {
						"properties": {
							"language": {
								"type": "string",
								"enum": [
									"Node",
									"NETCore",
									"Java",
									"Python",
									"Go"
								],
								"description": "Programming language of the application being debugged.",
								"default": null
							},
							"debugPort": {
								"type": "number",
								"description": "Debug Port used on the container.",
								"default": 9229
							},
							"remoteRoot": {
								"type": "string",
								"description": "Absolute path to the remote directory containing the program",
								"default": "/app"
							},
							"podSelector": {
								"type": "object",
								"description": "Selector to choose debugging pod",
								"default": {
									"app": "deployment-name"
								}
							},
							"localRoot": {
								"type": "string",
								"description": "Path to the local directory containing the program",
								"default": "^\"\\${workspaceFolder}\""
							},
							"protocol": {
								"type": "string",
								"enum": [
									"auto",
									"inspector",
									"legacy"
								],
								"description": "Node.js debug protocol used",
								"default": "auto"
							}
						}
					},
					"attach": {
						"properties": {
							"language": {
								"type": "string",
								"enum": [
									"Node",
									"NETCore",
									"Java",
									"Python",
									"Go"
								],
								"description": "Programming language of the application being debugged.",
								"default": null
							},
							"debugPort": {
								"type": "number",
								"description": "Debug Port used on the container.",
								"default": 9229
							},
							"remoteRoot": {
								"type": "string",
								"description": "Absolute path to the remote directory containing the program",
								"default": "/app"
							},
							"podSelector": {
								"type": "object",
								"description": "Selector to choose debugging pod. Usually a dictionary where key is app and value is the name of the deployment will suffice. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more information.",
								"default": {
									"app": "deployment-name"
								}
							},
							"localRoot": {
								"type": "string",
								"description": "Path to the local directory containing the program",
								"default": "^\"\\${workspaceFolder}\""
							},
							"containerName": {
								"type": "string",
								"description": "Name of the container to be debugged. This field will only be used if more than one container is found in the pod.",
								"default": "container-name"
							},
							"protocol": {
								"type": "string",
								"enum": [
									"auto",
									"inspector",
									"legacy"
								],
								"description": "Node.js debug protocol used",
								"default": "auto"
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "Cloud Code Debug: Launch (NodeJS)",
						"description": "Configuration for debugging a NodeJS app on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "Node",
							"request": "launch",
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "/app",
							"protocol": "auto",
							"name": "Launch App on Kubernetes Cluster: NodeJS",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code Debug: Attach (NodeJS)",
						"description": "Configuration for attaching to a .NET Core app on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "Node",
							"request": "attach",
							"debugPort": 9229,
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "/app",
							"name": "Attach App on Kubernetes Cluster: NodeJS",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code Debug: Launch (.NET Core)",
						"description": "Configuration for debugging a .NET Core app on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "NETCore",
							"request": "launch",
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "/app",
							"name": "Launch App on Kubernetes Cluster: .NET Core",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code Debug: Attach (.NET Core)",
						"description": "Configuration for attaching to a .NET Core App on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "NETCore",
							"request": "attach",
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "/app",
							"name": "Attach App on Kubernetes Cluster: .NET Core",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code Debug: Launch (Java)",
						"description": "Configuration for debugging a Java App on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "Java",
							"request": "launch",
							"name": "Launch App on Kubernetes Cluster: Java",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code Debug: Attach (Java)",
						"description": "Configuration for debugging a Java App on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "Java",
							"request": "attach",
							"debugPort": 50005,
							"name": "Attach App on Kubernetes Cluster: Java",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code Debug: Launch (Python)",
						"description": "Configuration for debugging a Python App on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "Python",
							"request": "launch",
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "/app",
							"name": "Launch App on Kubernetes Cluster: Python",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code Debug: Attach (Python)",
						"description": "Configuration for debugging a Python app on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "Python",
							"request": "attach",
							"debugPort": 3000,
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "/app",
							"name": "Attach App on Kubernetes Cluster: Python",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code Debug: Launch (Go)",
						"description": "Configuration for debugging a Golang app on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "Go",
							"request": "launch",
							"debugPort": 2345,
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "/go/src/app",
							"name": "Launch App on Kubernetes Cluster: Go",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code Debug: Attach (Go)",
						"description": "Configuration for debugging a Golang App on a Kubernetes cluster",
						"body": {
							"type": "cloudcode",
							"language": "Go",
							"request": "attach",
							"debugPort": 2345,
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "/go/src/app",
							"name": "Attach App on Kubernetes Cluster: Go",
							"podSelector": {
								"app": "deployment-name"
							}
						}
					}
				]
			}
		],
		"commands": [
			{
				"command": "cloudcode.refreshKubectlExplorer",
				"title": "Refresh Cluster Explorer",
				"icon": {
					"light": "images/light/refresh.png",
					"dark": "images/dark/refresh.png"
				},
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.switchKubeConfig",
				"title": "Switch KubeConfig",
				"icon": {
					"light": "images/light/switch.svg",
					"dark": "images/dark/switch.svg"
				},
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.removeKubeConfig",
				"title": "Remove from list",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.removeKubeConfigCommandPalette",
				"title": "Remove KubeConfig from Cluster Explorer",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshKubectlCollection",
				"title": "Refresh",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.setKubectlCluster",
				"title": "Set as Active Cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.setKubectlNamespace",
				"title": "Set as Active Namespace",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deleteKubectlResource",
				"title": "Delete",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.describeKubectlResource",
				"title": "Describe",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.metricsKubectlResource",
				"title": "View Metrics",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.getKubectlContainerTerminal",
				"title": "Get Terminal",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openDashboard",
				"title": "Open Dashboard",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.copyResourceValue",
				"title": "Copy Resource Name",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.applyTriggerYaml",
				"title": "Apply Trigger",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openKubectlAddress",
				"title": "Open Address",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/view-yaml.png",
					"dark": "images/dark/view-yaml.png"
				}
			},
			{
				"command": "cloudcode.gke.switchAccount",
				"title": "Switch Account",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/switch-account.svg",
					"dark": "images/dark/switch-account.svg"
				}
			},
			{
				"command": "cloudcode.diffConfiguration",
				"title": "Diff the current JSON/YAML file with Kubernetes deployed resource",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.createConfiguration",
				"title": "Create Kubernetes resource from current file",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.applyConfiguration",
				"title": "Apply the current JSON/YAML file to the Kubernetes deployed resource",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deleteKubectlCluster",
				"title": "Remove from Context",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.createNewApp",
				"title": "New Application",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deployApp",
				"title": "Deploy",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.continuousDeploy",
				"title": "Continuous Deploy",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.welcome",
				"title": "Welcome",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.changeLogs",
				"title": "Change Logs",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openCloudShellReadme",
				"title": "Welcome to Remote Development",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openMinikubeDashboard",
				"title": "Open Minikube dashboard for starting/stopping local Minikube cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openMinikubeDashboardContext",
				"title": "Open Minikube dashboard",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.toggleAwsExplorer",
				"title": "Toggle AWS Explorer",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.toggleAzureExplorer",
				"title": "Toggle Azure Explorer",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.mountSecretVolume",
				"title": "Mount Secret as Volume",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.addSecretEnvironmentVariable",
				"title": "Add Secret as Environment Variable",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openLogsViewer",
				"title": "View Logs",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.reportIssueOnGithub",
				"title": "Report Kubernetes Extension Issue on Github",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/report.png",
					"dark": "images/dark/report.png"
				}
			},
			{
				"command": "cloudcode.viewKubectlYaml",
				"title": "View YAML",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/view-yaml.png",
					"dark": "images/dark/view-yaml.png"
				}
			},
			{
				"command": "cloudcode.editKubectlYaml",
				"title": "Edit YAML",
				"category": "Cloud Code",
				"icon": {
					"light": "images/dark/edit-yaml.png",
					"dark": "images/light/edit-yaml.png"
				}
			},
			{
				"command": "cloudcode.scaleDeployment",
				"title": "Scale Deployment",
				"icon": {
					"light": "images/dark/edit-yaml.png",
					"dark": "images/light/edit-yaml.png"
				}
			},
			{
				"command": "cloudcode.gke.refreshGkeExplorer",
				"title": "Refresh GKE cluster explorer",
				"icon": {
					"light": "images/light/refresh.png",
					"dark": "images/dark/refresh.png"
				},
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.createCluster",
				"title": "Create GKE cluster",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/add.svg",
					"dark": "images/dark/add.svg"
				}
			},
			{
				"command": "cloudcode.gke.addCluster",
				"title": "Search for GKE clusters to set as current context",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.openClusterInConsole",
				"title": "Open in Google Cloud Console",
				"category": "Cloud Code",
				"icon": {
					"dark": "images/dark/open.svg",
					"light": "images/light/open.svg"
				}
			},
			{
				"command": "cloudcode.gke.openProjectInConsole",
				"title": "Open in Google Cloud Console",
				"category": "Cloud Code",
				"icon": {
					"dark": "images/dark/open.svg",
					"light": "images/light/open.svg"
				}
			},
			{
				"command": "cloudcode.gke.openUrl",
				"title": "Open URL",
				"category": "Cloud Code",
				"icon": {
					"dark": "images/dark/open.svg",
					"light": "images/light/open.svg"
				}
			},
			{
				"command": "cloudcode.gke.addClusterContextMenu",
				"title": "Set as Active Cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.deleteGkeCluster",
				"title": "Delete Cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.runGcloudInit",
				"title": "Initialize Google Cloud SDK",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.gcloudSignout",
				"title": "Signout of all accounts in Google Cloud SDK",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.gcloudSignoutContext",
				"title": "Sign out of Google Cloud SDK",
				"category": "Cloud Code",
				"icon": {
					"dark": "images/dark/logout.svg",
					"light": "images/light/logout.svg"
				}
			},
			{
				"command": "cloudcode.gke.copyValue",
				"title": "Copy Value",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.pinProjectIdToTree",
				"title": "Pin Project to Tree-View",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.pinProjectIdToTreeContext",
				"title": "Pin Project",
				"category": "Cloud Code",
				"icon": {
					"dark": "images/dark/pin.svg",
					"light": "images/light/pin.svg"
				}
			},
			{
				"command": "cloudcode.gke.unpinProjectIdFromTreeContext",
				"title": "Unpin Project",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.azure.createCluster",
				"title": "Create Azure Kubernetes cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.azure.refreshAzureExplorer",
				"title": "Refresh Azure cluster explorer",
				"icon": {
					"light": "images/light/refresh.png",
					"dark": "images/dark/refresh.png"
				},
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.azure.addClusterContextMenu",
				"title": "Add Azure cluster to kubeconfig",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.azure.deleteAzureCluster",
				"title": "Delete Azure cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.aws.createCluster",
				"title": "Create AWS EKS Cluster Stack",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.aws.refreshClusterExplorer",
				"title": "Refresh AWS EKS Explorer",
				"icon": {
					"light": "images/light/refresh.png",
					"dark": "images/dark/refresh.png"
				},
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.aws.setCurrentContext",
				"title": "Set as Current Context",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.aws.deleteAwsCluster",
				"title": "Delete Cluster Stack",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.shell.openRecent",
				"title": "Open in Cloud Shell...",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.exportCoverage",
				"title": "INTERNAL: Export Code Coverage",
				"category": "Cloud Code"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "cloudcode.removeKubeConfig",
					"when": "false"
				},
				{
					"command": "cloudcode.openMinikubeDashboardContext",
					"when": "false"
				},
				{
					"command": "cloudcode.toggleAwsExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.toggleAzureExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "false"
				},
				{
					"command": "cloudcode.applyTriggerYaml",
					"when": "false"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.switchAccount",
					"when": "false"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "false"
				},
				{
					"command": "cloudcode.scaleDeployment",
					"when": "false"
				},
				{
					"command": "cloudcode.openKubectlAddress",
					"when": "false"
				},
				{
					"command": "cloudcode.mountSecretVolume",
					"when": "false"
				},
				{
					"command": "cloudcode.changeLogs",
					"when": "false"
				},
				{
					"command": "cloudcode.addSecretEnvironmentVariable",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.deleteGkeCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.addClusterContextMenu",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.openClusterInConsole",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.openProjectInConsole",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.runGcloudInit",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.gcloudSignoutContext",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.copyValue",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.pinProjectIdToTreeContext",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.unpinProjectIdFromTreeContext",
					"when": "false"
				},
				{
					"command": "cloudcode.azure.deleteAzureCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.azure.addClusterContextMenu",
					"when": "false"
				},
				{
					"command": "cloudcode.aws.deleteAwsCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.aws.setCurrentContext",
					"when": "false"
				},
				{
					"command": "cloudcode.exportCoverage",
					"when": "cloudcode.exportCoverageVisible"
				}
			],
			"view/title": [
				{
					"command": "cloudcode.reportIssueOnGithub",
					"when": "view == cloudcode.kubectlExplorer",
					"group": "navigation"
				},
				{
					"command": "cloudcode.refreshKubectlExplorer",
					"when": "view == cloudcode.kubectlExplorer",
					"group": "navigation"
				},
				{
					"command": "cloudcode.openMinikubeDashboardContext",
					"when": "view == cloudcode.kubectlExplorer"
				},
				{
					"command": "cloudcode.toggleAwsExplorer",
					"when": "view == cloudcode.kubectlExplorer"
				},
				{
					"command": "cloudcode.toggleAzureExplorer",
					"when": "view == cloudcode.kubectlExplorer"
				},
				{
					"command": "cloudcode.gke.createCluster",
					"when": "view == cloudcode.gke.clusterExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.gke.pinProjectIdToTreeContext",
					"when": "view == cloudcode.gke.clusterExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.gke.refreshGkeExplorer",
					"when": "view == cloudcode.gke.clusterExplorer",
					"group": "navigation@3"
				},
				{
					"command": "cloudcode.gke.gcloudSignoutContext",
					"when": "view == cloudcode.gke.clusterExplorer",
					"group": "navigation@4"
				},
				{
					"command": "cloudcode.azure.refreshAzureExplorer",
					"when": "view == cloudcode.azure.clusterExplorer",
					"group": "navigation"
				},
				{
					"command": "cloudcode.azure.createCluster",
					"when": "view == cloudcode.azure.clusterExplorer"
				},
				{
					"command": "cloudcode.aws.refreshClusterExplorer",
					"when": "view == cloudcode.aws.clusterExplorer",
					"group": "navigation"
				},
				{
					"command": "cloudcode.aws.createCluster",
					"when": "view == cloudcode.aws.clusterExplorer"
				}
			],
			"explorer/context": [
				{
					"command": "cloudcode.applyTriggerYaml",
					"when": "resourceScheme == file && resourceLangId == yaml && resourceFilename =~ /trigger/ig",
					"group": "6_copypath"
				}
			],
			"view/item/context": [
				{
					"command": "cloudcode.setKubectlCluster",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeCluster",
					"group": "1"
				},
				{
					"command": "cloudcode.openDashboard",
					"when": "view == cloudcode.kubectlExplorer && viewItem == activeKubeCluster",
					"group": "2"
				},
				{
					"command": "cloudcode.refreshKubectlCollection",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeGenericCollection",
					"group": "2"
				},
				{
					"command": "cloudcode.setKubectlNamespace",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "1"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentObject",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodObject",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeContainer",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubectlIPObject",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeSecretNode",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeEvent",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeConfigKeyNode",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeConfigMapNode",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeNodeObject",
					"group": "8"
				},
				{
					"command": "cloudcode.switchKubeConfig",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeConfigPathObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.switchKubeConfig",
					"when": "view == cloudcode.kubectlExplorer && viewItem == defaultKubeConfigObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.removeKubeConfig",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeConfigPathObject",
					"group": "2"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeNodeObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.gke.switchAccount",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == activeAccount",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.scaleDeployment",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentReplicaObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeNodeObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.mountSecretVolume",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentObject",
					"group": "3"
				},
				{
					"command": "cloudcode.addSecretEnvironmentVariable",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentObject",
					"group": "3"
				},
				{
					"command": "cloudcode.openKubectlAddress",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubectlIPObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentObject",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodObject",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeNodeObject",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "8"
				},
				{
					"command": "cloudcode.metricsKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodObject",
					"group": "8"
				},
				{
					"command": "cloudcode.metricsKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeNodeObject",
					"group": "8"
				},
				{
					"command": "cloudcode.refreshKubectlCollection",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentCollection",
					"group": "8"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentObject",
					"group": "1"
				},
				{
					"command": "cloudcode.refreshKubectlCollection",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodCollection",
					"group": "8"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodObject",
					"group": "1"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeContainer",
					"group": "1"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentObject",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodObject",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeNodeObject",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlCluster",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeCluster",
					"group": "9"
				},
				{
					"command": "cloudcode.getKubectlContainerTerminal",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeContainer",
					"group": "2"
				},
				{
					"command": "cloudcode.getKubectlContainerTerminal",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodObject",
					"group": "2"
				},
				{
					"command": "cloudcode.gke.openClusterInConsole",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeClusterObject",
					"group": "inline"
				},
				{
					"command": "cloudcode.gke.openProjectInConsole",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeProjectObject",
					"group": "inline"
				},
				{
					"command": "cloudcode.gke.openProjectInConsole",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeDefaultProjectObject",
					"group": "inline"
				},
				{
					"command": "cloudcode.gke.openUrl",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == urlObject",
					"group": "inline"
				},
				{
					"command": "cloudcode.gke.deleteGkeCluster",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.gke.addClusterContextMenu",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.gke.unpinProjectIdFromTreeContext",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeProjectObject",
					"group": "10"
				},
				{
					"command": "cloudcode.gke.copyValue",
					"when": "view == cloudcode.gke.clusterExplorer",
					"group": "10"
				},
				{
					"command": "cloudcode.azure.deleteAzureCluster",
					"when": "view == cloudcode.azure.clusterExplorer && viewItem == azureClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.azure.addClusterContextMenu",
					"when": "view == cloudcode.azure.clusterExplorer && viewItem == azureClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.aws.deleteAwsCluster",
					"when": "view == cloudcode.aws.clusterExplorer && viewItem == awsClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.aws.setCurrentContext",
					"when": "view == cloudcode.aws.clusterExplorer && viewItem == awsClusterObject",
					"group": "10"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "kubernetesExplorer",
					"icon": "images/logo.svg",
					"title": "Cloud Code"
				}
			]
		},
		"views": {
			"kubernetesExplorer": [
				{
					"id": "cloudcode.kubectlExplorer",
					"name": "Kubernetes Explorer"
				},
				{
					"id": "cloudcode.gke.clusterExplorer",
					"name": "Google Kubernetes Engine Explorer"
				},
				{
					"id": "cloudcode.azure.clusterExplorer",
					"name": "Azure Kubernetes Explorer",
					"when": "cloudcode.azureExplorerVisible"
				},
				{
					"id": "cloudcode.aws.clusterExplorer",
					"name": "AWS EKS Cluster Explorer",
					"when": "cloudcode.awsExplorerVisible"
				}
			]
		}
	},
	"scripts": {
		"copy-markdowns": "copyfiles -u 1 \"cloud-code-vscode/*.md\" ./",
		"vscode:uninstall": "node ./dist/uninstall_hook.js",
		"vscode:prepublish": "npm run compile-prod && cd ./src/webview && npm run build && cd ../../third_party/yaml-language-server && npm run compile-prod && cd ../../ && npm run copy-markdowns",
		"compile-prod": "cross-env NODE_OPTIONS=--max_old_space_size=8192 webpack --mode production",
		"compile": "cross-env NODE_OPTIONS=--max_old_space_size=8192 webpack --mode none && cd ./src/webview && npm run build && cd ../../third_party/yaml-language-server/ && npm run compile",
		"compile-nomaps": "cross-env NODE_OPTIONS=--max_old_space_size=8192 webpack --mode none --maps bypass && cd ./src/webview && npm run build && cd ../../third_party/yaml-language-server/ && npm run compile",
		"compile:yls": "cd third_party/yaml-language-server && npm run compile",
		"watch": "npm run compile && webpack --mode none --watch",
		"watch:kubernetes": "npm run compile && webpack --mode none --watch --info-verbosity verbose",
		"watch:kubernetes:test": "tsc -watch -p ./",
		"watch:cloud-debug": "tsc -watch -p ./",
		"postinstall": "cd ./src/webview && npm install && cd ../../third_party/yaml-language-server && npm install",
		"test": "cross-env CODE_TESTS_PATH=$INIT_CWD/dist/test node ./dist/test/runTest.js && cd ./src/webview && npm run test && cd ../../third_party/yaml-language-server && npm run test",
		"test-extension": "cross-env CODE_TESTS_PATH=$INIT_CWD/dist/test node ./dist/test/runTest.js",
		"integration-test": "mocha --timeout 10000000 -u tdd \"./dist/integration_test.js\"",
		"check": "gts check && npm run markdownlint && cd ./src/webview && npm run lint && cd ../../third_party/yaml-language-server/ && npm run check",
		"markdownlint": "markdownlint --ignore \"**/node_modules/**\" --ignore pull_request_template.md \"**/*.md\"",
		"clean": "gts clean && cd ./third_party/yaml-language-server && npm run clean",
		"package": "vsce package",
		"fix": "cross-env NODE_OPTIONS=--max_old_space_size=8192 gts fix && cd ./third_party/yaml-language-server && npm run fix",
		"test-compile": "tsc -p . && npm run compile:yls && cd ./src/webview && npm run test-build",
		"compile:ext:coverage": "cross-env NODE_OPTIONS=--max_old_space_size=8192 webpack --config webpack.coverage.config.ts --mode none",
		"compile:yls:coverage": "cd ./third_party/yaml-language-server && npm run compile-coverage",
		"preintegration-test": "run-p compile:ext:coverage compile:yls:coverage",
		"pretest": "npm run test-compile",
		"posttest": "npm run check",
		"pkg-lsp": "cd ./third_party/yaml-language-server && npm run pkg"
	},
	"devDependencies": {
		"@angular-devkit/build-angular": "^0.13.9",
		"@angular/cli": "^7.0.4",
		"@angular/compiler-cli": "^7.2.10",
		"@angular/language-service": "^7.2.10",
		"@types/async-lock": "^1.1.1",
		"@types/decompress": "^4.2.3",
		"@types/fs-extra": "^8.0.0",
		"@types/get-port": "^4.0.1",
		"@types/glob": "^5.0.35",
		"@types/istanbul": "^0.4.30",
		"@types/js-yaml": "^3.11.2",
		"@types/lodash": "^4.14.112",
		"@types/long": "^4.0.0",
		"@types/lru-cache": "^5.1.0",
		"@types/mocha": "^5.2.2",
		"@types/node": "^10.12.29",
		"@types/node-fetch": "^2.1.4",
		"@types/prettier": "^1.16.1",
		"@types/query-string": "^6.2.0",
		"@types/semver": "^5.5.0",
		"@types/shell-quote": "^1.6.1",
		"@types/shelljs": "^0.8.0",
		"@types/string-argv": "^0.1.0",
		"@types/tmp": "0.0.33",
		"@types/uuid": "^3.4.3",
		"@types/vscode": "^1.38.0",
		"@types/webdriverio": "^4.8.0",
		"@types/webpack": "^4.4.32",
		"@types/webpack-node-externals": "^1.6.3",
		"@types/yaml": "^1.0.1",
		"copyfiles": "^2.0.0",
		"cross-env": "^5.2.0",
		"electron": "^5.0.0",
		"gts": "1.1.0",
		"istanbul": "^0.4.5",
		"istanbul-instrumenter-loader": "^3.0.1",
		"markdownlint-cli": "^0.16.0",
		"mocha": "^5.2.0",
		"npm-run-all": "^4.1.5",
		"robotjs": "^0.5.1",
		"source-map-support": "^0.5.4",
		"spectron": "^6.0.0",
		"spectron-keys": "0.0.1",
		"ts-loader": "^5.3.3",
		"ts-node": "~5.0.1",
		"tslint": "^5.18.0",
		"typemoq": "^2.1.0",
		"typescript": "^3.2.4",
		"typescript-json-schema": "^0.40.0",
		"vsce": "^1.51.1",
		"vscode-test": "^1.0.0",
		"webpack": "^4.32.2",
		"webpack-cli": "^3.3.2",
		"webpack-node-externals": "^1.7.2",
		"yarn": "^1.15.2"
	},
	"dependencies": {
		"@angular/compiler": "^7.2.10",
		"@octokit/rest": "^15.12.0",
		"async-lock": "^1.2.0",
		"aws-sdk": "^2.424.0",
		"decache": "^4.4.0",
		"decompress": "^4.2.0",
		"file-set": "^2.0.1",
		"find-process": "^1.2.1",
		"fs-extra": "^8.1.0",
		"get-port": "^4.0.1",
		"glob": "^7.1.2",
		"googleapis": "^43.0.0",
		"http-status-codes": "^1.3.0",
		"is-elevated": "^2.0.1",
		"js-yaml": "^3.13.1",
		"jsonc-parser": "^1.0.3",
		"lodash": "^4.17.14",
		"long": "^4.0.0",
		"lru-cache": "^5.1.0",
		"node-fetch": "^2.2.0",
		"node-sass": "^4.12.0",
		"prettier": "^1.15.2",
		"query-string": "^6.2.0",
		"remap-istanbul": "^0.11.1",
		"request-light": "^0.2.3",
		"semver": "^5.6.0",
		"shell-quote": "^1.6.1",
		"shelljs": "^0.8.2",
		"simple-git": "^1.107.0",
		"string-argv": "^0.1.0",
		"tmp": "0.0.33",
		"tree-kill": "^1.2.1",
		"uuid": "^3.3.2",
		"vscode-debugadapter": "^1.31.0",
		"vscode-debugprotocol": "^1.31.0",
		"vscode-json-languageservice": "3.3.0",
		"vscode-languageclient": "^5.2.1",
		"vscode-languageserver": "^5.2.1",
		"vscode-languageserver-types": "^3.14.0",
		"vscode-nls": "^4.1.1",
		"vscode-uri": "^2.0.2"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/GoogleCloudPlatform/cloud-code-vscode.git"
	},
	"bugs": {
		"url": "https://github.com/GoogleCloudPlatform/cloud-code-vscode/issues"
	},
	"__metadata": {
		"id": "5e8803a2-3dc8-42b3-9c5f-ea9d37828c03",
		"publisherId": "f24fd523-af08-49d8-bb0b-f4eda502706e",
		"publisherDisplayName": "Google Cloud"
	}
}