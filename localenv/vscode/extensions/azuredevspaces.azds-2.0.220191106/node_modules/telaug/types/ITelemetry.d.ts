import { ITimedEvent } from './ITimedEvent';
import { ITelemetryEvent } from './ITelemetryEvent';
import { FaultType } from './FaultType';
import { ITelemetryFilter } from './ITelemetryFilter';
export interface ITelemetry {
    addFilter: (filter: ITelemetryFilter) => void;
    removeFilter: (filter: ITelemetryFilter) => void;
    addContextProperty: (property: string, value: string | number | boolean | undefined | null, isSensitive?: boolean) => void;
    removeContextProperty: (property: string) => void;
    sendTelemetryEvent: (eventName: string, properties?: {
        [key: string]: string;
    }, measures?: {
        [key: string]: number;
    }) => void;
    sendFault: (eventName: string, type: FaultType, details?: string, exception?: any, correlatedEvent?: ITelemetryEvent) => void;
    startTimedEvent: (eventName: string, correlate?: boolean) => ITimedEvent;
    setCorrelationEvent: (correlationEvent: ITelemetryEvent) => void;
    removeCorrelationEvent: (correlationEvent: ITelemetryEvent) => void;
    correlate: (telemetryEvent: ITelemetryEvent) => void;
    endAllPendingEvents: () => Promise<void>;
}
