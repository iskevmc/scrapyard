import { ITimedEvent } from '../types/ITimedEvent';
import { ITelemetryEvent } from '../types/ITelemetryEvent';
import { FaultType } from '../types/FaultType';
import { ITelemetryFilter } from '../types/ITelemetryFilter';
import { ITelemetryReporter } from '../types/ITelemetryReporter';
import { ITelemetry } from '../types/ITelemetry';
export declare class TelemetryDef implements ITelemetry {
    private reporter;
    private contextProperties;
    private correlationEvent;
    private telemetryEvents;
    private filters;
    init(reporter: ITelemetryReporter, featureName?: string, readLogsParam?: () => Promise<string>, errorToStringParam?: (e?: Error) => string | null): void;
    addFilter(filter: ITelemetryFilter): void;
    removeFilter(filter: ITelemetryFilter): void;
    addContextProperty(property: string, value: string | number | boolean | undefined | null, isSensitive?: boolean, canSendSensitiveInformation?: boolean): void;
    removeContextProperty(property: string): void;
    private addContextPropertiesToObject;
    sendTelemetryEvent(eventName: string, properties?: {
        [key: string]: string;
    }, measures?: {
        [key: string]: number;
    }): void;
    sendFault(eventName: string, type: FaultType, details?: string, exception?: any, correlatedEvent?: ITelemetryEvent): void;
    startTimedEvent(eventName: string, correlate?: boolean): ITimedEvent;
    setCorrelationEvent(correlationEvent: ITelemetryEvent): void;
    removeCorrelationEvent(correlationEvent: ITelemetryEvent): void;
    correlate(telemetryEvent: ITelemetryEvent): void;
    endAllPendingEvents(): Promise<void>;
}
declare const Telemetry: TelemetryDef;
export { Telemetry };
export declare class TelemetryEvent implements ITelemetryEvent {
    private eventName;
    private properties;
    private measures;
    private correlationId;
    protected isSent: boolean;
    id: string;
    constructor(eventName: string, correlate?: boolean);
    static create(property: string, data: {
        properties?: Record<string, string>;
        measures?: Record<string, number>;
        correlate?: boolean;
    }): TelemetryEvent;
    addProperty(property: string, value: any, isSensitive?: boolean, canSendSensitiveInformation?: boolean): TelemetryEvent;
    addPropertyIfNotExists(property: string, value: any, isSensitive?: boolean): this;
    propertyExists(property: string): boolean;
    addMeasure(measure: string, value: number): void;
    addMeasureIfNotExists(measure: string, value: number): void;
    getCorrelationId(): string;
    correlateWith(otherEvent: ITelemetryEvent): this;
    correlateWithId(correlationId: string): this;
    send(): Promise<void>;
}
export declare function cleanSensitiveInformation(str: string): string;
export declare class Fault extends TelemetryEvent {
    constructor(eventName: string, type: FaultType, details?: string, exception?: any, correlatedEvent?: ITelemetryEvent);
    private attachLogs;
    send(): Promise<void>;
}
export declare const propagateOffsetMarkTime: (markName: string, markEvent: ITimedEvent) => void;
