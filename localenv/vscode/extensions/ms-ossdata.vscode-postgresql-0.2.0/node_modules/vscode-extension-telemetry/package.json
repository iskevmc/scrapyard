{
  "_args": [
    ["vscode-extension-telemetry@https://registry.npmjs.org/vscode-extension-telemetry/-/vscode-extension-telemetry-0.1.1.tgz", "E:\\Projects\\vscode-postgresql"]
  ],
  "_from": "vscode-extension-telemetry@0.1.1",
  "_id": "vscode-extension-telemetry@0.1.1",
  "_inCache": true,
  "_location": "/vscode-extension-telemetry",
  "_phantomChildren": {},
  "_requested": {
    "name": "vscode-extension-telemetry",
    "raw": "vscode-extension-telemetry@https://registry.npmjs.org/vscode-extension-telemetry/-/vscode-extension-telemetry-0.1.1.tgz",
    "rawSpec": "https://registry.npmjs.org/vscode-extension-telemetry/-/vscode-extension-telemetry-0.1.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/vscode-extension-telemetry/-/vscode-extension-telemetry-0.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": ["/"],
  "_resolved": "https://registry.npmjs.org/vscode-extension-telemetry/-/vscode-extension-telemetry-0.1.1.tgz",
  "_shasum": "91387e06b33400c57abd48979b0e790415ae110b",
  "_shrinkwrap": null,
  "_spec": "vscode-extension-telemetry@https://registry.npmjs.org/vscode-extension-telemetry/-/vscode-extension-telemetry-0.1.1.tgz",
  "_where": "E:\\Projects\\vscode-postgresql",
  "author": {
    "name": "Microsoft Corporation"
  },
  "bugs": {
    "url": "https://github.com/Microsoft/vscode-extension-telemetry/issues"
  },
  "dependencies": {
    "applicationinsights": "0.15.19"
  },
  "description": "A module for first party microsoft extensions to report consistent telemetry.",
  "devDependencies": {
    "@types/node": "^6.0.42",
    "typescript": "^2.1.6",
    "vscode": "^1.1.22"
  },
  "engines": {
    "vscode": "^1.5.0"
  },
  "homepage": "https://github.com/Microsoft/vscode-extension-telemetry#readme",
  "license": "MIT",
  "main": "./lib/telemetryReporter.js",
  "name": "vscode-extension-telemetry",
  "optionalDependencies": {},
  "readme": "# vscode-extension-telemetry\nThis module provides a consistent way for first-party extensions to report telemetry\nover Application Insights. The module respects the user's decision about whether or\nnot to send telemetry data.\n\nFollow [guide to set up Application Insights](https://docs.microsoft.com/en-us/azure/application-insights/app-insights-nodejs-quick-start) in Azure and get your key.\n\n# install \n`npm install vscode-extension-telemetry`\n\n# usage\n ```javascript\n const vscode = require('vscode');\n const TelemetryReporter = require('vscode-extension-telemetry');\n \n // all events will be prefixed with this event name\n const extensionId = '<your extension unique name>';\n \n // extension version will be reported as a property with each event \n const extensionVersion = '<your extension version>'; \n \n // the application insights key (also known as instrumentation key)\n const key = '<your key>'; \n\n// telemetry reporter \n let reporter;\n \n function activate(context: vscode.ExtensionContext) {\n    ...\n    // create telemetry reporter on extension activation\n    reporter = new TelemetryReporter(extensionId, extensionVersion, key);\n    // ensure it gets property disposed\n    context.subscriptions.push(reporter);\n    ...\n }\n\n function deactivate() {\n   // This will ensure all pending events get flushed\n    reporter.dispose();\n }\n\n ...\n // send event any time after activation\n reporter.sendTelemetryEvent('sampleEvent', { 'stringProp': 'some string' }, { 'numericMeasure': 123});\n \n  ```\n\n# common properties\n- `common.extname`\n- `common.extversion`\n- `common.vscodemachineid` \n- `common.vscodesessionid`\n- `common.vscodeversion` \n- `common.os`\n- `common.platformversion`\n\n# License\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Microsoft/vscode-extension-telemetry.git"
  },
  "scripts": {
    "compile": "tsc -p .",
    "dev-postinstall": "node ./node_modules/vscode/bin/install",
    "watch": "tsc -w -p ."
  },
  "types": "./lib/telemetryReporter.d.ts",
  "version": "0.1.1"
}