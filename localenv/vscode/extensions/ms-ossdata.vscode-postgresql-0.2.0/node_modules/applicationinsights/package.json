{
  "_args": [
    [
      "applicationinsights@https://registry.npmjs.org/applicationinsights/-/applicationinsights-1.0.8.tgz",
      "E:\\Projects\\vscode-postgresql"
    ]
  ],
  "_from": "applicationinsights@1.0.8",
  "_id": "applicationinsights@1.0.8",
  "_inCache": true,
  "_location": "/applicationinsights",
  "_phantomChildren": {},
  "_requested": {
    "name": "applicationinsights",
    "raw": "applicationinsights@https://registry.npmjs.org/applicationinsights/-/applicationinsights-1.0.8.tgz",
    "rawSpec": "https://registry.npmjs.org/applicationinsights/-/applicationinsights-1.0.8.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/applicationinsights/-/applicationinsights-1.0.8.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/applicationinsights/-/applicationinsights-1.0.8.tgz",
  "_shasum": "db6e3d983cf9f9405fe1ee5ba30ac6e1914537b5",
  "_shrinkwrap": null,
  "_spec": "applicationinsights@https://registry.npmjs.org/applicationinsights/-/applicationinsights-1.0.8.tgz",
  "_where": "E:\\Projects\\vscode-postgresql",
  "bugs": {
    "url": "https://github.com/Microsoft/ApplicationInsights-node.js/issues"
  },
  "contributors": [
    {
      "email": "aidevsupport@microsoft.com",
      "name": "Application Insights Developer Support"
    },
    {
      "email": "appinsightssdk@microsoft.com",
      "name": "Application Insights SDK Maintainers"
    }
  ],
  "dependencies": {
    "diagnostic-channel": "0.2.0",
    "diagnostic-channel-publishers": "0.2.1",
    "zone.js": "0.7.6"
  },
  "description": "Microsoft Application Insights module for Node.js",
  "devDependencies": {
    "@types/mocha": "2.2.40",
    "@types/node": "4.2.4",
    "@types/sinon": "2.1.2",
    "mocha": "3.1.2",
    "node-mocks-http": "1.2.3",
    "sinon": "1.17.6",
    "typescript": "2.4.2"
  },
  "homepage": "https://github.com/Microsoft/ApplicationInsights-node.js#readme",
  "keywords": [
    "exception monitoring",
    "request monitoring",
    "performance monitoring",
    "application insights",
    "microsoft",
    "azure",
    "cloud",
    "tracing",
    "telemetry",
    "analytics",
    "apm"
  ],
  "license": "MIT",
  "main": "./out/applicationinsights.js",
  "name": "applicationinsights",
  "optionalDependencies": {},
  "readme": "# Application Insights for Node.js\r\n\r\n[![npm version](https://badge.fury.io/js/applicationinsights.svg)](http://badge.fury.io/js/applicationinsights)\r\n[![Build Status](https://travis-ci.org/Microsoft/ApplicationInsights-node.js.svg?branch=master)](https://travis-ci.org/Microsoft/ApplicationInsights-node.js)\r\n\r\n[Azure Application Insights][] monitors your backend services and components after\r\nyou deploy them to help you [discover and rapidly diagnose performance and other\r\nissues][]. Add this SDK to your Node.js services to include deep info about Node.js\r\nprocesses and their external dependencies such as database and cache services.\r\nYou can use this SDK for your Node.js services hosted anywhere: your datacenter,\r\nAzure VMs and Web Apps, and even other public clouds.\r\n\r\n[Azure Application Insights]: https://azure.microsoft.com/documentation/articles/app-insights-overview/\r\n[discover and rapidly diagnose performance and other issues]: https://docs.microsoft.com/azure/application-insights/app-insights-detect-triage-diagnose\r\n\r\nThis library tracks the following out-of-the-box:\r\n- Incoming and outgoing HTTP requests\r\n- Important system metrics such as CPU usage\r\n- Unhandled exceptions\r\n- Events from many popular third-party libraries ([see Automatic third-party instrumentation](#automatic-third-party-instrumentation))\r\n\r\nYou can manually track more aspects of your app and system using the API described in the\r\n[Track custom telemetry](#track-custom-telemetry) section.\r\n\r\n## Getting Started\r\n\r\n1. Create an Application Insights resource in Azure by following [these instructions][].\r\n2. Grab the _Instrumentation Key_ (aka \"ikey\") from the resource you created in\r\n   step 1. Later, you'll either add it to your app's environment variables or\r\n   use it directly in your scripts.\r\n3. Add the Application Insights Node.js SDK to your app's dependencies and\r\n   package.json:\r\n     ```bash\r\n     npm install --save applicationinsights\r\n     ```\r\n     > *Note:* If you're using TypeScript, do not install a separate \"typings\" package.\r\n     > This NPM package contains built-in typings.\r\n4. As early as possible in your app's code, load the Application Insights\r\n   package:\r\n     ```javascript\r\n     let appInsights = require('applicationinsights');\r\n     ```\r\n5. Configure the local SDK by calling `appInsights.setup('_your_ikey_');`, using\r\n   the ikey you grabbed in step 2. Or put this ikey in the\r\n   `APPINSIGHTS_INSTRUMENTATIONKEY` environment variable and call\r\n   `appInsights.setup()` without parameters.\r\n   > For more configuration options see below.\r\n6. Finally, start automatically collecting and sending data by calling\r\n   `appInsights.start();`.\r\n\r\n[these instructions]: https://docs.microsoft.com/azure/application-insights/app-insights-nodejs\r\n\r\n\r\n## Basic Usage\r\n\r\nFor out-of-the-box collection of HTTP requests, popular third-party library events,\r\nunhandled exceptions, and system metrics:\r\n\r\n```javascript\r\nlet appInsights = require(\"applicationinsights\");\r\nappInsights.setup(\"_your_ikey_\").start();\r\n```\r\n\r\n* If the instrumentation key is set in the environment variable\r\n  APPINSIGHTS\\_INSTRUMENTATIONKEY, `.setup()` can be called with no\r\n  arguments. This makes it easy to use different ikeys for different\r\n  environments.\r\n\r\nLoad the Application Insights library (i.e. `require(\"applicationinsights\")`) as\r\nearly as possible in your scripts, before loading other packages. This is needed\r\nso that the Application Insights libary can prepare later packages for tracking.\r\nIf you encounter conflicts with other libraries doing similar preparation, try\r\nloading the Application Insights library after those.\r\n\r\nBecause of the way JavaScript handles callbacks, additional work is necessary to\r\ntrack a request across external dependencies and later callbacks. By default\r\nthis additional tracking is enabled; disable it by calling\r\n`setAutoDependencyCorrelation(false)` as described in the\r\nConfiguration section below.\r\n\r\n## Migrating from versions prior to 0.22\r\n\r\nThere are breaking changes between releases prior to version 0.22 and after. These\r\nchanges are designed to bring consistency with other Application Insights SDKs and\r\nallow future extensibility. Please review this README for new method and property names.\r\n\r\nIn general, you can migrate with the following:\r\n- Replace references to `appInsights.client` with `appInsights.defaultClient`\r\n- Replace references to `appInsights.getClient()` with `new appInsights.TelemetryClient()`\r\n- Replace all arguments to client.track* methods with a single object containing named\r\nproperties as arguments. See your IDE's built-in type hinting, or [TelemetryTypes](https://github.com/Microsoft/ApplicationInsights-node.js/tree/develop/Declarations/Contracts/TelemetryTypes), for\r\nthe expected object for each type of telemetry.\r\n\r\nIf you access SDK configuration functions without chaining them to `appInsights.setup()`,\r\nyou can now find these functions at appInsights.Configuration\r\n(eg. `appInsights.Configuration.setAutoCollectDependencies(true)`).\r\nTake care to review the changes to the default configuration in the next section.\r\n\r\n## Configuration\r\n\r\nThe appInsights object provides a number of configuration methods. They are\r\nlisted in the following snippet with their default values.\r\n\r\n```javascript\r\nlet appInsights = require(\"applicationinsights\");\r\nappInsights.setup(\"<instrumentation_key>\")\r\n    .setAutoDependencyCorrelation(true)\r\n    .setAutoCollectRequests(true)\r\n    .setAutoCollectPerformance(true)\r\n    .setAutoCollectExceptions(true)\r\n    .setAutoCollectDependencies(true)\r\n    .setAutoCollectConsole(true)\r\n    .setUseDiskRetryCaching(true)\r\n    .start();\r\n```\r\n\r\nPlease review their descriptions in your IDE's built-in type hinting, or [applicationinsights.ts](https://github.com/Microsoft/ApplicationInsights-node.js/tree/develop/applicationinsights.ts) for\r\ndetailed information on what these control, and optional secondary arguments.\r\n\r\nNote that by default `setAutoCollectConsole` is configured to *exclude* calls to `console.log`\r\n(and other `console` methods). By default, only calls to supported third-party loggers\r\n(e.g. `winston`, `bunyan`) will be collected. You can change this behavior to *include* calls\r\nto `console` methods by using `setAutoCollectConsole(true, true)`.\r\n\r\n### Sampling\r\n\r\nBy default, the SDK will send all collected data to the Application Insights service. If you collect a lot of data, you might want to enable sampling to reduce the amount of data sent. Set the `samplingPercentage` field on the Config object of a Client to accomplish this. Setting `samplingPercentage` to 100 (the default) means all data will be sent, and 0 means nothing will be sent.\r\n\r\nIf you are using automatic correlation, all data associated with a single request will be included or excluded as a unit.\r\n\r\nAdd code such as the following to enable sampling:\r\n\r\n```javascript\r\nconst appInsights = require(\"applicationinsights\");\r\nappInsights.setup(\"<instrumentation_key>\");\r\nappInsights.defaultClient.config.samplingPercentage = 33; // 33% of all telemetry will be sent to Application Insights\r\nappInsights.start();\r\n```\r\n\r\n### Multiple roles for multi-component applications\r\n\r\nIf your application consists of multiple components that you wish to instrument all with the same Instrumentation Key and still see these components as separate units in the Portal as if they were using separate Instrumentation Keys (for example, as separate nodes on the Application Map) you may need to manually configure the RoleName field to distinguish one component's telemetry from other components sending data to your Application Insights resource. (See [Monitor multi-component applications with Application Insights (preview)](https://docs.microsoft.com/azure/application-insights/app-insights-monitor-multi-role-apps))\r\n\r\nUse the following to set the RoleName field:\r\n\r\n```javascript\r\nconst appInsights = require(\"applicationinsights\");\r\nappInsights.setup(\"<instrumentation_key>\");\r\nappInsights.defaultClient.context.tags[appInsights.defaultClient.context.keys.cloudRole] = \"MyRoleName\";\r\nappInsights.start();\r\n```\r\n\r\n### Automatic third-party instrumentation\r\n\r\nIn order to track context across asynchronous calls, some changes are required in third party libraries such as mongodb and redis.\r\nBy default ApplicationInsights will use [`diagnostic-channel-publishers`](https://github.com/Microsoft/node-diagnostic-channel/tree/master/src/diagnostic-channel-publishers)\r\nto monkey-patch some of these libraries.\r\nThis can be disabled by setting the `APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL` environment variable. Note that by setting that\r\nenvironment variable, events may no longer be correctly associated with the right operation. Individual monkey-patches can be\r\ndisabled by setting the `APPLICATION_INSIGHTS_NO_PATCH_MODULES` environment variable to a comma separated list of packages to\r\ndisable, e.g. `APPLICATION_INSIGHTS_NO_PATCH_MODULES=console,redis` to avoid patching the `console` and `redis` packages.\r\n\r\nCurrently there are 9 packages which are instrumented: `bunyan`, `console`, `mongodb`, `mongodb-core`, `mysql`, `redis`, `winston`,\r\n`pg`, and `pg-pool`. Visit the [diagnostic-channel-publishers' README](https://github.com/Microsoft/node-diagnostic-channel/blob/master/src/diagnostic-channel-publishers/README.md)\r\nfor information about exactly which versions of these packages are patched.\r\n\r\nThe `bunyan`, `winston`, and `console` patches will generate Application Insights Trace events based on whether `setAutoCollectConsole` is enabled.\r\nThe rest will generate Application Insights Dependency events based on whether `setAutoCollectDependencies` is enabled.\r\n\r\n## Track custom telemetry\r\n\r\nYou can track any request, event, metric or exception using the Application\r\nInsights client. Examples follow:\r\n\r\n```javascript\r\nlet appInsights = require(\"applicationinsights\");\r\nappInsights.setup().start(); // assuming ikey in env var. start() can be omitted to disable any non-custom data\r\nlet client = appInsights.defaultClient;\r\nclient.trackEvent({name: \"my custom event\", properties: {customProperty: \"custom property value\"}});\r\nclient.trackException({exception: new Error(\"handled exceptions can be logged with this method\")});\r\nclient.trackMetric({name: \"custom metric\", value: 3});\r\nclient.trackTrace({message: \"trace message\"});\r\nclient.trackDependency({target:\"http://dbname\", name:\"select customers proc\", data:\"SELECT * FROM Customers\", duration:231, resultCode:0, success: true, dependencyTypeName: \"ZSQL\"});\r\nclient.trackRequest({name:\"GET /customers\", url:\"http://myserver/customers\", duration:309, resultCode:200, success:true});\r\n\r\nlet http = require(\"http\");\r\nhttp.createServer( (req, res) => {\r\n  client.trackNodeHttpRequest({request: req, response: res}); // Place at the beginning of your request handler\r\n});\r\n```\r\n\r\nAn example utility using `trackMetric` to measure how long event loop scheduling takes:\r\n\r\n```javascript\r\nfunction startMeasuringEventLoop() {\r\n  var startTime = process.hrtime();\r\n  var sampleSum = 0;\r\n  var sampleCount = 0;\r\n\r\n  // Measure event loop scheduling delay\r\n  setInterval(() => {\r\n    var elapsed = process.hrtime(startTime);\r\n    startTime = process.hrtime();\r\n    sampleSum += elapsed[0] * 1e9 + elapsed[1];\r\n    sampleCount++;\r\n  }, 0);\r\n\r\n  // Report custom metric every second\r\n  setInterval(() => {\r\n    var samples = sampleSum;\r\n    var count = sampleCount;\r\n    sampleSum = 0;\r\n    sampleCount = 0;\r\n\r\n    if (count > 0) {\r\n      var avgNs = samples / count;\r\n      var avgMs = Math.round(avgNs / 1e6);\r\n      client.trackMetric({name: \"Event Loop Delay\", value: avgMs});\r\n    }\r\n  }, 1000);\r\n}\r\n```\r\n\r\n## Preprocess data with Telemetry Processors\r\n\r\n```javascript\r\npublic addTelemetryProcessor(telemetryProcessor: (envelope: Contracts.Envelope, context: { http.RequestOptions, http.ClientRequest, http.ClientResponse, correlationContext }) => boolean)\r\n```\r\n\r\nYou can process and filter collected data before it is sent for retention using\r\n_Telemetry Processors_. Telemetry processors are called one by one in the\r\norder they were added before the telemetry item is sent to the cloud.\r\n\r\nIf a telemetry processor returns false that telemetry item will not be sent.\r\n\r\nAll telemetry processors receive the telemetry data and its envelope to inspect and\r\nmodify. They also receive a context object. The contents of this object is defined by\r\nthe `contextObjects` parameter when calling a track method for manually tracked telemetry.\r\nFor automatically collected telemetry, this object is filled with available request information\r\nand the persistent request context as provided by `appInsights.getCorrelationContext()` (if\r\nautomatic dependency correlation is enabled).\r\n\r\nThe TypeScript type for a telemetry processor is:\r\n\r\n```typescript\r\ntelemetryProcessor: (envelope: ContractsModule.Contracts.Envelope, context: { http.RequestOptions, http.ClientRequest, http.ClientResponse, correlationContext }) => boolean;\r\n```\r\n\r\nFor example, a processor that removes stack trace data from exceptions might be\r\nwritten and added as follows:\r\n\r\n```javascript\r\nfunction removeStackTraces ( envelope, context ) {\r\n  if (envelope.data.baseType === \"Microsoft.ApplicationInsights.ExceptionData\") {\r\n    var data = envelope.data.baseData;\r\n    if (data.exceptions && data.exceptions.length > 0) {\r\n      for (var i = 0; i < data.exceptions.length; i++) {\r\n        var exception = data.exceptions[i];\r\n        exception.parsedStack = null;\r\n        exception.hasFullStack = false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nappInsights.defaultClient.addTelemetryProcessor(removeStackTraces);\r\n```\r\n\r\nMore info on the telemetry API is available in [the docs][].\r\n\r\n[the docs]: https://azure.microsoft.com/documentation/articles/app-insights-api-custom-events-metrics/\r\n\r\n## Use multiple instrumentation keys\r\n\r\nYou can create multiple Azure Application Insights resources and send different\r\ndata to each by using their respective instrumentation keys (\"ikey\"). For\r\nexample:\r\n\r\n```javascript\r\nlet appInsights = require(\"applicationinsights\");\r\n\r\n// configure auto-collection under one ikey\r\nappInsights.setup(\"_ikey-A_\").start();\r\n\r\n// track some events manually under another ikey\r\nlet otherClient = new appInsights.TelemetryClient(\"_ikey-B_\");\r\notherClient.trackEvent({name: \"my custom event\"});\r\n```\r\n\r\n## Examples\r\n\r\n* Track dependencies\r\n\r\n    ```javascript\r\n    let appInsights = require(\"applicationinsights\");\r\n    let client = new appInsights.TelemetryClient();\r\n\r\n    var success = false;\r\n    let startTime = Date.now();\r\n    // execute dependency call here....\r\n    let duration = Date.now() - startTime;\r\n    success = true;\r\n\r\n    client.trackDependency({target:\"http://dbname\", name:\"select customers proc\", data:\"SELECT * FROM Customers\", duration:duration, resultCode:0, success: true, dependencyTypeName: \"ZSQL\"});\r\n    ```\r\n\r\n* Assign custom properties to be included with all events\r\n\r\n    ```javascript\r\n    appInsights.defaultClient.commonProperties = {\r\n      environment: process.env.SOME_ENV_VARIABLE\r\n    };\r\n    ```\r\n\r\n* Manually track all HTTP GET requests\r\n\r\n    Note that all requests are tracked by default. To disable automatic\r\n    collection, call `.setAutoCollectRequests(false)` before calling `start()`.\r\n\r\n    ```javascript\r\n    appInsights.defaultClient.trackRequest({name:\"GET /customers\", url:\"http://myserver/customers\", duration:309, resultCode:200, success:true});\r\n    ```\r\n    Alternatively you can track requests using ```trackNodeHttpRequest``` method:\r\n\r\n    ```javascript\r\n    var server = http.createServer((req, res) => {\r\n      if ( req.method === \"GET\" ) {\r\n          appInsights.defaultClient.trackNodeHttpRequest({request:req, response:res});\r\n      }\r\n      // other work here....\r\n      res.end();\r\n    });\r\n    ```\r\n\r\n* Track server startup time\r\n\r\n    ```javascript\r\n    let start = Date.now();\r\n    server.on(\"listening\", () => {\r\n      let duration = Date.now() - start;\r\n      appInsights.defaultClient.trackMetric({name: \"server startup time\", value: duration});\r\n    });\r\n    ```\r\n\r\n## Advanced configuration options\r\nThe Client object contains a `config` property with many optional settings for\r\nadvanced scenarios. These can be set as follows:\r\n```\r\nclient.config.PROPERTYNAME = VALUE;\r\n```\r\nThese properties are client specific, so you can configure `appInsights.defaultClient`\r\nseparately from clients created with `new appInsights.TelemetryClient()`.\r\n\r\n| Property                        | Description                                                                                                |\r\n| ------------------------------- |------------------------------------------------------------------------------------------------------------|\r\n| instrumentationKey              | An identifier for your Application Insights resource                                                       |\r\n| endpointUrl                     | The ingestion endpoint to send telemetry payloads to                                                       |\r\n| proxyHttpUrl                    | A proxy server for SDK HTTP traffic (Optional, Default pulled from `http_proxy` environment variable)      |\r\n| proxyHttpsUrl                   | A proxy server for SDK HTTPS traffic (Optional, Default pulled from `https_proxy` environment variable)    |\r\n| httpAgent                       | An http.Agent to use for SDK HTTP traffic (Optional, Default undefined)                                    |\r\n| httpsAgent                      | An https.Agent to use for SDK HTTPS traffic (Optional, Default undefined)                                  |\r\n| maxBatchSize                    | The maximum number of telemetry items to include in a payload to the ingestion endpoint (Default `250`)    |\r\n| maxBatchIntervalMs              | The maximum amount of time to wait to for a payload to reach maxBatchSize (Default `15000`)                |\r\n| disableAppInsights              | A flag indicating if telemetry transmission is disabled (Default `false`)                                  |\r\n| samplingPercentage              | The percentage of telemetry items tracked that should be transmitted (Default `100`)                       |\r\n| correlationIdRetryIntervalMs    | The time to wait before retrying to retrieve the id for cross-component correlation (Default `30000`)      |\r\n| correlationHeaderExcludedDomains| A list of domains to exclude from cross-component correlation header injection (Default See [Config.ts][]) |\r\n\r\n[Config.ts]: https://github.com/Microsoft/ApplicationInsights-node.js/blob/develop/Library/Config.ts\r\n\r\n## Branches\r\n\r\n- Ongoing development takes place on the [develop][] branch. **Please submit\r\n  pull requests to this branch.**\r\n- Releases are merged to the [master][] branch and published to [npm][].\r\n\r\n[master]: https://github.com/Microsoft/ApplicationInsights-node.js/tree/master\r\n[develop]: https://github.com/Microsoft/ApplicationInsights-node.js/tree/develop\r\n[npm]: https://www.npmjs.com/package/applicationinsights\r\n\r\n## Links\r\n\r\n* [ApplicationInsights-Home][] is our central repo for libraries and info for\r\n  all languages and platforms.\r\n* Follow the latest Application Insights changes and announcements on the\r\n  [ApplicationInsights-Announcements][] repo.\r\n* [SDK Release Schedule][]\r\n\r\n[ApplicationInsights-Announcements]: https://github.com/Microsoft/ApplicationInsights-Announcements\r\n[ApplicationInsights-Home]: https://github.com/Microsoft/ApplicationInsights-Home\r\n[SDK Release Schedule]: https://github.com/Microsoft/ApplicationInsights-Home/wiki/SDK-Release-Schedule\r\n\r\n## Contributing\r\n\r\n1. Install all dependencies with `npm install`.\r\n2. Set an environment variable to your instrumentation key (optional).\r\n    ```bash\r\n    // windows\r\n    set APPINSIGHTS_INSTRUMENTATIONKEY=<insert_your_instrumentation_key_here>\r\n    // linux/macos\r\n    export APPINSIGHTS_INSTRUMENTATIONKEY=<insert_your_instrumentation_key_here>\r\n    ```\r\n3. Run tests\r\n    ```bash\r\n    npm run test\r\n    npm run backcompattest\r\n    npm run functionaltest\r\n    ```\r\n    _Note: Functional tests require Docker_\r\n\r\n---\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct][]. For more\r\ninformation see the [Code of Conduct FAQ][] or contact\r\n[opencode@microsoft.com][] with any additional questions or comments.\r\n\r\n[Microsoft Open Source Code of Conduct]: https://opensource.microsoft.com/codeofconduct/\r\n[Code of Conduct FAQ]: https://opensource.microsoft.com/codeofconduct/faq/\r\n[opencode@microsoft.com]: mailto:opencode@microsoft.com\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Microsoft/ApplicationInsights-node.js.git"
  },
  "scripts": {
    "backcompattest": "npm run build && npm pack && node --use_strict ./Tests/BackCompatibility/RunBackCompatTests.js",
    "build": "npm run build:deps && npm run build:compile",
    "build:compile": "tsc --project ./tsconfig.json",
    "build:deps": "npm update --dev",
    "clean": "rm -rf ./out && rm -rf ./node_modules",
    "functionaltest": "npm run build && npm pack && node --use_strict ./Tests/FunctionalTests/RunFunctionalTests.js",
    "prepare": "npm run build:compile",
    "prepublishOnly": "npm run build",
    "pretest": "npm run build",
    "test": "npm run test:ts && npm run test:js",
    "test:js": "mocha ./Tests/js --recursive",
    "test:ts": "mocha ./out/Tests --recursive"
  },
  "types": "./out/applicationinsights.d.ts",
  "version": "1.0.8"
}
